var documenterSearchIndex = {"docs":
[{"location":"Examples/FileIO.html#FileIO-Examples","page":"FileIO Examples","title":"FileIO Examples","text":"","category":"section"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"CurrentModule = SignalTables","category":"page"},{"location":"Examples/FileIO.html#JSON-Write-to-File","page":"FileIO Examples","title":"JSON - Write to File","text":"","category":"section"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"using SignalTables\r\n\r\nsigTable = getSignalTableExample(\"VariousTypes\")\r\nwriteSignalTable(\"VariousTypes_prettyPrint.json\", sigTable; indent=2, log=true)\r\nwriteSignalTable(\"VariousTypes_compact.json\"    , sigTable)","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"results in the following files","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"VariousTypes_prettyPrint.json.\nVariousTypes_compact.json.","category":"page"},{"location":"Examples/FileIO.html#JSON-Write-to-String","page":"FileIO Examples","title":"JSON - Write to String","text":"","category":"section"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"using  SignalTables\r\n\r\nstr = signalTableToJSON( getSignalTableExample(\"VariousTypes\") )\r\nprintln(str)","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"results in the following print output","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"\"{\\\"_class\\\":\\\"SignalTable\\\",\\\"time\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":[0.0,0.1,0.2,0.3,0.4,0.5],\\\"unit\\\":\\\"s\\\",\\\"independent\\\":true},\\\"load.r\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":{\\\"_class\\\":\\\"Array\\\",\\\"eltype\\\":\\\"Float64\\\",\\\"size\\\":[6,3],\\\"values\\\":[0.0,0.09983341664682815,0.19866933079506122,0.29552020666133955,0.3894183423086505,0.479425538604203,1.0,0.9950041652780258,0.9800665778412416,0.955336489125606,0.9210609940028851,0.8775825618903728,0.0,0.09983341664682815,0.19866933079506122,0.29552020666133955,0.3894183423086505,0.479425538604203]},\\\"unit\\\":\\\"m\\\"},\\\"motor.angle\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":[0.0,0.09983341664682815,0.19866933079506122,0.29552020666133955,0.3894183423086505,0\" ⋯ 533 bytes ⋯ \",\\\"info\\\":\\\"Reference angle and speed\\\"},\\\"wm\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":[1.0,0.9950041652780258,0.9800665778412416,0.955336489125606,0.9210609940028851,0.8775825618903728],\\\"unit\\\":\\\"rad/s\\\",\\\"alias\\\":\\\"motor.w\\\"},\\\"ref.clock\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":[true,null,null,true,null,null],\\\"variability\\\":\\\"clock\\\"},\\\"motor.w_c\\\":{\\\"_class\\\":\\\"Var\\\",\\\"values\\\":[0.6,null,null,0.8,null,null],\\\"variability\\\":\\\"clocked\\\",\\\"clock\\\":\\\"ref.clock\\\"},\\\"motor.inertia\\\":{\\\"_class\\\":\\\"Par\\\",\\\"value\\\":{\\\"_class\\\":\\\"Number\\\",\\\"type\\\":\\\"Float32\\\",\\\"value\\\":0.02},\\\"unit\\\":\\\"kg*m/s^2\\\"},\\\"motor.data\\\":{\\\"_class\\\":\\\"Par\\\",\\\"value\\\":\\\"resources/motorMap.json\\\"},\\\"attributes\\\":{\\\"_class\\\":\\\"Par\\\",\\\"info\\\":\\\"This is a test signal table\\\"}}\"","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"Such a string could be communicated to a web browser.","category":"page"},{"location":"Examples/FileIO.html#JLD-(HDF5)-Write-to-File","page":"FileIO Examples","title":"JLD (HDF5) - Write to File","text":"","category":"section"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"JLD stores Julia objects in HDF5 format, hereby additional attributes are stored to preserve type information. ","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"using SignalTables\r\nusing FileIO\r\n\r\nsigTable = getSignalTableExample(\"VariousTypes\")\r\n\r\nsave( File(format\"JLD\", \"VariousTypes.jld\"), sigTable)","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"results in the following file:","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"VariousTypes.jld.","category":"page"},{"location":"Examples/FileIO.html#CSV-Read-from-File","page":"FileIO Examples","title":"CSV - Read from File","text":"","category":"section"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"All Julia tables that are derived from Tables.jl are seen as signal tables. For example, a CSV Files is read from file and treated as signal Table:","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"using  SignalTables\r\nimport CSV\r\n\r\nfile = joinpath(SignalTables.path, \"examples\", \"fileIO\", \"Rotational_First.csv\")\r\n\r\nprintln(\"\\n... Read csv file \\\"$file\\\"\")\r\nsigTable = CSV.File(file)\r\n\r\nprintln(\"\\n... Show csv file as signal table\")\r\nshowInfo(sigTable)\r\n\r\nprintln(\"\\ntime[1:10] = \", getSignal(sigTable, \"time\")[:values][1:10])","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"results in the following output:","category":"page"},{"location":"Examples/FileIO.html","page":"FileIO Examples","title":"FileIO Examples","text":"... Read csv file \"[...]\\SignalTables\\examples\\fileIO\\Rotational_First.csv\"\r\n\r\n... Show csv file as signal table\r\n name            unit  size     eltypeOrType  kind  attributes\r\n───────────────────────────────────────────────────────────────\r\n time                  (2002,)  Float64       Var\r\n damper.phi_rel        (2002,)  Float64       Var\r\n damper.w_rel          (2002,)  Float64       Var\r\n inertia3.phi          (2002,)  Float64       Var\r\n inertia3.w            (2002,)  Float64       Var\r\n\r\ntime[1:10] = [0.0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004, 0.0045000000000000005]","category":"page"},{"location":"Functions/PlotPackages.html#Plot-Packages","page":"Plot Packages","title":"Plot Packages","text":"","category":"section"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"The plot package XXX to be used can be defined by:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"ENV[\"SignalTablesPlotPackage\"] = XXX\n(e.g. in .julia/config/startup.jl file: ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"), or\nby calling usePlotPackage(XXX) (e.g. usePlotPackage(\"PyPlot\")).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Supported values for XXX:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"\"PyPlot\" (PyPlot plots with Matplotlib from Python),\n\"GLMakie\" (GLMakie provides interactive plots in an OpenGL window),\n\"WGLMakie\" (WGLMakie provides interactive plots in a browser window),\n\"CairoMakie\" (CairoMakie provides static plots on file with publication quality).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Furthermore, there is a dummy implementation included in SignalTables that is useful when performing tests with runtests.jl, in order that no plot package needs to be loaded during the tests:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"\"SilentNoPlot\" (= all plot calls are silently ignored).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Typically, runtests.jl is defined as:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"using SignalTables\r\nusePlotPackage(\"SilentNoPlot\") # Define Plot Package (previously defined one is put on a stack)\r\ninclude(\"include_all.jl\")      # Include all tests that use a plot package\r\nusePreviousPlotPackage()       # Use previously defined Plot package","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"The following functions are provided to define/inquire the current plot package.","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols.","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Plot package functions Description\n@usingPlotPackage Expands into using PlotPackage_<PlotPackageName>\nusePlotPackage Define the plot package to be used.\nusePreviousPlotPackage Define the previously defined plot package to be used.\ncurrentPlotPackage Return name defined with usePlotPackage","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"@usingPlotPackage\r\nusePlotPackage\r\nusePreviousPlotPackage\r\ncurrentPlotPackage","category":"page"},{"location":"Functions/PlotPackages.html#SignalTables.@usingPlotPackage","page":"Plot Packages","title":"SignalTables.@usingPlotPackage","text":"@usingPlotPackage()\n\nExecute using XXX, where XXX is the Plot package that was activated with usePlotPackage(plotPackage).\n\n\n\n\n\n","category":"macro"},{"location":"Functions/PlotPackages.html#SignalTables.usePlotPackage","page":"Plot Packages","title":"SignalTables.usePlotPackage","text":"usePlotPackage(plotPackage::String)\n\nDefine the plot package that shall be used by command @usingPlotPackage. If a PlotPackage package is already defined, save it on an internal stack (can be reactivated with usePreviousPlotPackage().\n\nPossible values for plotPackage:\n\n\"PyPlot\"\n\"GLMakie\"\n\"WGLMakie\"\n\"CairoMakie\"\n\"SilentNoPlot\"\n\nExample\n\nusing SignalTables\nusePlotPackage(\"GLMakie\")\n\nmodule MyTest\n    using SignalTables\n    @usingPlotPackage\n\n    t = range(0.0, stop=10.0, length=100)\n    result = Dict{String,Any}(\"time\" => t, \"phi\" => sin.(t))\n\n    plot(result, \"phi\")  # use GLMakie for the rendering\nend\n\n\n\n\n\n","category":"function"},{"location":"Functions/PlotPackages.html#SignalTables.usePreviousPlotPackage","page":"Plot Packages","title":"SignalTables.usePreviousPlotPackage","text":"usePreviousPlotPackage()\n\nPop the last saved PlotPackage package from an internal stack and call usePlotPackage(<popped PlotPackage package>).\n\n\n\n\n\n","category":"function"},{"location":"Functions/PlotPackages.html#SignalTables.currentPlotPackage","page":"Plot Packages","title":"SignalTables.currentPlotPackage","text":"currentPlotPackage()\n\nReturn the name of the plot package as a string that was defined with usePlotPackage. For example, the function may return \"GLMakie\", \"PyPlot\" or \"NoPlot\" or or \"\", if no PlotPackage is defined.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Plots.html#Plots","page":"Plots","title":"Plots","text":"","category":"section"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"The functions below are used to plot one or more signalTable signals in one or more diagrams within one or more windows (figures), and save a window (figure) in various formats on file (e.g. png, pdf). The functions below are available after","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"using SignalTables       # Make Symbols available\r\nusePlotPackage(\"PyPlot\") # or ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"\r\n                         # Other options: \"GLMakie\", \"WGLMakie, \"CairoMakie\", \"SilentNoPlot\"\r\n@usingPlotPackage        # expands into: using SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"or","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"using Modia              # Make Symbols available\r\nusePlotPackage(\"PyPlot\") # or ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"\r\n                         # Other options: \"GLMakie\", \"WGLMakie, \"CairoMakie\", \"SilentNoPlot\"\r\n@usingPlotPackage        # expands into: using SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"have been executed. The documentation has been generated with SignalTablesInterface_PyPlot.","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"note: Note\nSignalTables.jl exports all symbols of the table.\nModia.jl reexports all symbols and uses as signalTable argument instantiatedModel.","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"Plot functions Description\nplot Plot signals from a signal table in multiple diagrams/figures.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"Functions/Plots.html","page":"Plots","title":"Plots","text":"plot\r\nsaveFigure\r\ncloseFigure\r\ncloseAllFigures\r\nshowFigure","category":"page"},{"location":"Functions/Plots.html#SignalTablesInterface_PyPlot.plot","page":"Plots","title":"SignalTablesInterface_PyPlot.plot","text":"plot(signalTable, names;\n     heading = \"\", grid = true, xAxis = nothing,\n     figure = 1, prefix = \"\", reuse = false, maxLegend = 10,\n     minXaxisTickLabels = false,\n     MonteCarloAsArea = true)\n\nGenerate plots of selected signals of a signal table using the plot package defined with [@usePlotPackage]@ref(xxx). Possible values for xxx: \"GLMakie\", \"WGLMakie\", \"CairoMakie\", \"PyPlot\", \"SilentNoPlot\").\n\nsignalTable is an instance of a type that supports the Abstract Signal Table Interface.\n\nArgument names defines the diagrams to be drawn and the signals to be included in the respective diagram:\n\nIf names is a String, generate one diagram with one time series of the variable with key names.\nIf names is a Tuple of Strings, generate one diagram with the time series of the variables with the keys given in the tuple.\nIf names is a Vector or a Matrix of Strings and/or Tuples, generate a vector or matrix of diagrams.\n\nNote, the names (and their units, if available in the signals) are automatically used as legends in the respective diagram.\n\nA signal variable identified by a String key can be a scalar of type <:Number or an array of element type <:Number. A signal is defined by a vector of time values, a corresponding vector of signal values, and the signal type (continuous or clocked).\n\nNote, before passing data to the plot package, it is converted to Float64. This allows to, for example, also plot rational numbers, even if not supported by the plot package. Measurements.Measurement{xxx} and MonteCarloMeasurements is specially handled.\n\nOptional Arguments\n\nheading::AbstractString: Optional heading above the diagram.\ngrid::Bool: = true, to display a grid.\nxAxis::Union{AbstractString,Nothing}: Name of x-axis. If xAxis=nothing, the independent variable of the signal table (usually \"time\" is used as x-axis.\nfigure::Int: Integer identifier of the window in which the diagrams shall be drawn.\nprefix::AbstractString: String that is appended in front of every legend label (useful especially if reuse=true).\nreuse::Bool: If figure already exists and reuse=false, clear the figure before adding the plot.  Otherwise, include the plot in the existing figure without removing the curves present in the figure.  reuse = true is ignored for \"WGLMakie\" (because not supported).\nmaxLegend::Int: If the number of legend entries in one plot command > maxLegend, the legend is suppressed. All curves have still their names as labels. In PyPlot, the curves can be inspected by their names by clicking in the toolbar of the plot on button Edit axis, curve .. and then on Curves.\nminXaxisTickLabels::Bool: = true, if xaxis tick labels shall be removed in a vector or array of plots, if not the last row (useful when including plots in a document). = false, x axis tick labels are always shown (useful when interactively zooming into a plot).\nMonteCarloAsArea::Bool: = true, if MonteCarloMeasurements values are shown with the mean value and the area between the minimum and the maximum value of all particles. = false, if all particles of MonteCarloMeasurements values are shown (e.g. if a value has 2000 particles, then 2000 curves are shown in the diagram).\n\nExamples\n\nusing SignalTables\nusing Unitful\n\n# Generate \"using xxx\" statement\n# (where \"xxx\" is from a previous SignalTables.usePlotPackage(\"xxx\"))\n@usingPlotPackage\n\n# Construct result data\nt = range(0.0, stop=10.0, length=100);\nresult = Dict{String,Any}();\nresult[\"time\"] = t*u\"s\";\nresult[\"phi\"]  = sin.(t)*u\"rad\";\nresult[\"w\"]    = cos.(t)*u\"rad/s\";\nresult[\"a\"]    = 1.2*sin.(t)*u\"rad/s^2\";\nresult[\"r\"]    = hcat(0.4 * cos.(t), 0.5 * sin.(t), 0.3*cos.(t))*u\"m\";\n\n# 1 signal in one diagram (legend = \"phi [rad]\")\nplot(result, \"phi\")\n\n# 3 signals in one diagram\nplot(result, (\"phi\", \"w\", \"a\"), figure=2)\n\n# 3 diagrams in form of a vector (every diagram has one signal)\nplot(result, [\"phi\", \"w\", \"r\"], figure=3)\n\n# 4 diagrams in form of a matrix (every diagram has one signal)\nplot(result, [\"phi\" \"w\";\n              \"a\"   \"r[2]\" ], figure=4)\n\n# 2 diagrams in form of a vector\nplot(result, [ (\"phi\", \"w\"), (\"a\") ], figure=5)\n\n# 4 diagrams in form of a matrix\nplot(result, [ (\"phi\",)           (\"phi\", \"w\");\n               (\"phi\", \"w\", \"a\")  (\"r[2:3]\",)     ],figure=6)\n\n# Plot w=f(phi) in one diagram\nplot(result, \"w\", xAxis=\"phi\", figure=7)\n\n# Append signal of the next simulation run to figure=1\n# (legend = \"Sim 2: phi [rad]\")\nresult[\"phi\"] = 0.5*result[\"phi\"];\nplot(result, \"phi\", prefix=\"Sim 2: \", reuse=true)\n\nExample of a matrix of plots:\n\n(Image: Matrix of plots)\n\n\n\n\n\n","category":"function"},{"location":"Functions/Plots.html#SignalTablesInterface_PyPlot.saveFigure","page":"Plots","title":"SignalTablesInterface_PyPlot.saveFigure","text":"saveFigure(figure, file; kwargs...)\n\nSave figure on file. The file extension defines the image format (for example *.png).\n\nPlot package Supported file extensions\nGLMakie png, jpg, bmp\nWGLMakie png\nCairoMakie png, pdf, svg, eps\nPyPlot depends on backend (usually: png, pdf, jpg, tiff, svg, ps, eps)\nSilentNoPlot Call is ignored\n\nKeyword arguments\n\nresolution: (width::Int, height::Int) of the scene in dimensionless units (equivalent to px for GLMakie and WGLMakie).\n\nExample\n\nusing SignalTables\n@usingPlotPackage\n...\n\nplot(..., figure=1)\nplot(..., figure=2)\n\nsaveFigure(1, \"plot.png\")   # save in png-format\nsaveFigure(2, \"plot.svg\")   # save in svg-format\n\n\n\n\n\n","category":"function"},{"location":"Functions/Plots.html#SignalTablesInterface_PyPlot.closeFigure","page":"Plots","title":"SignalTablesInterface_PyPlot.closeFigure","text":"closeFigure(figure)\n\nClose figure.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Plots.html#SignalTablesInterface_PyPlot.closeAllFigures","page":"Plots","title":"SignalTablesInterface_PyPlot.closeAllFigures","text":"closeAllFigures()\n\nClose all figures.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Plots.html#SignalTablesInterface_PyPlot.showFigure","page":"Plots","title":"SignalTablesInterface_PyPlot.showFigure","text":"showFigure(figure)\n\nPlot package Effect\nGLMakie Show figure in the single window.\nWGLMakie Show figure in the single window.\nCairoMakie Call is ignored\nPyPlot Call is ignored\nSilentNoPlot Call is ignored\n\nExample\n\nusing SignalTables\n@usingPlotPackage\n...\nplot(..., figure=1)\nplot(..., figure=2)\nplot(..., figure=3)\n\nshowFigure(2)\nshowFigure(1)\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#Signal-Tables","page":"Signal Tables","title":"Signal Tables","text":"","category":"section"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"The functions below operate on a signal table that implements the Abstract Signal Table Interface.","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols and uses instantiatedModel as signalTable argument.","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"Signal table functions Description\nnew_signal_table Returns a new signal table dictionary (= OrderedDict{String,Any}(\"_class\" => :SignalTable)).\nSignalTable Returns a new instance of type SignalTable.\nshowInfo Writes info about a signal table to the output stream.\ngetIndependentSignalNames Returns the names of the independent signals.\ngetSignalNames Returns a string vector of the signal names that are present in a signal table.\nhasSignal Returns true if a signal is present in a signal table.\ngetSignal Returns signal from a signal table as Var or as Par.\ngetSignalInfo Returns signal with :_typeof, :_size keys instead of :values/:value keys.\ngetIndependentSignalsSize Returns the lengths of the independent signals as Dims.\ngetValues Returns the values of a Var signal from a signal table.\ngetValuesWithUnit Returns the values of a Var signal from a signal table including its unit.\ngetValue Returns the value of a Par signal  from a signal table.\ngetValueWithUnit Returns the value of a Par signal from a signal table including its unit.\ngetFlattenedSignal Returns a copy of a signal where the values or the value are flattened and converted for use in plots or traditional tables.\ngetDefaultHeading Returns the default heading for a plot.\nsignalTableToJSON Returns a JSON string representation of a signal table.\nwriteSignalTable Write a signal table in JSON format on file.\ntoSignalTable Returns a signal table as instance of SignalTable.\nsignalTableToDataFrame Returns a signal table as DataFrame object.","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"new_signal_table\r\nSignalTable\r\nshowInfo\r\ngetIndependentSignalNames\r\ngetSignalNames\r\nhasSignal\r\ngetSignal\r\ngetSignalInfo\r\ngetIndependentSignalsSize\r\ngetValues\r\ngetValuesWithUnit\r\ngetValue\r\ngetValueWithUnit\r\ngetFlattenedSignal\r\ngetDefaultHeading\r\nsignalTableToJSON\r\nwriteSignalTable\r\ntoSignalTable\r\nsignalTableToDataFrame","category":"page"},{"location":"Functions/SignalTables.html#SignalTables.new_signal_table","page":"Signal Tables","title":"SignalTables.new_signal_table","text":"new_signal_table(args...)::OrderedDict{String,Any}\n\nReturns a new signal table, that is OrderedDict{String,Any}(\"_class\" => :SignalTable, args...)\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.SignalTable","page":"Signal Tables","title":"SignalTables.SignalTable","text":"sigTable = SignalTable(args...)\n\nReturns a new SignalTable dictionary.\n\nArguments args... are dictionary pairs where values must be Var(...) or Par(...). Example:\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", independent = true),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)]),\n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\"),\n  \"motor.w_ref\"  => Var(values= cos.(t), unit=\"rad/s\", info=\"Reference\"),\n  \"motor.w_m\"    => Var(values= Clocked(0.9*cos.(t),factor=2), unit=\"rad/s\", info=\"Measured\"),\n  \"motor.inertia\"=> Par(value = 0.02, unit=\"kg*m/s^2\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nThe first argument must define the independent signal, that is, Var(values=..., independent=true), ... and values must be an AbstractVector. Further added signals with a :values key, must have the same first dimension as the independent signal.\n\nMost dictionary operations can be applied on sigTable, as well as all functions of Overview of Functions.\n\nExamples\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", independent=true),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"),\n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\", state=true, der=\"motor.w\"),\n  \"motor.w\"      => Var(values= cos.(t), unit=\"rad/s\"),\n  \"motor.w_ref\"  => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\n                                info=\"Reference angle and speed\"),\n  \"wm\"           => Var(alias = \"motor.w\"),\n  \"ref.clock\"    => Var(values= [true, missing, missing, true, missing, missing],\n                                 variability=\"clock\"),\n  \"motor.w_c\"    => Var(values= [0.8, missing, missing, 1.5, missing, missing],\n                                variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\"=> Par(value = 0.02f0, unit=\"kg*m/s^2\"),\n  \"motor.data\"   => Par(value = \"resources/motorMap.json\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nsignalInfo(sigTable)\n\nThis results in the following output:\n\nname          unit          size  eltypeOrType kind attributes\n─────────────────────────────────────────────────────────────────────────────────────────\ntime          \"s\"           (6,)  Float64  Var  independent=true\nload.r        \"m\"           (6,3) Float64  Var\nmotor.angle   \"rad\"         (6,)  Float64  Var  state=true, der=\"motor.w\"\nmotor.w       \"rad/s\"       (6,)  Float64  Var  \nmotor.w_ref   [\"rad\",\"1/s\"] (6,2) Float64  Var  info=\"Reference angle and speed\"\nwm            \"rad/s\"       (6,)  Float64  Var  alias=\"motor.w\"\nref.clock                   (6,)  Bool     Var  variability=\"clock\"\nmotor.w_c                   (6,)  Float64  Var  variability=\"clocked\", clock=\"ref.clock\"\nmotor.inertia \"kg*m/s^2\"    ()    Float32  Par\nmotor.data                        String   Par\nattributes                                 Par  info=\"This is a test signal table\"\n\nThe command show(IOContext(stdout, :compact => true), sigTable) results in the following output:\n\nSignalTable(\n  \"time\" => Var(values=0.0:0.1:0.5, unit=\"s\", independent=true),\n  \"load.r\" => Var(values=[0.0 1.0 0.0; 0.0998334 0.995004 0.0998334; 0.198669 0.980067 0.198669; 0.29552 0.955336 0.29552; 0.389418 0.921061 0.389418; 0.479426 0.877583 0.479426], unit=\"m\"),\n  \"motor.angle\" => Var(values=[0.0, 0.0998334, 0.198669, 0.29552, 0.389418, 0.479426], unit=\"rad\", state=true. der=\"motor.w\"),\n  \"motor.w\" => Var(values=[1.0, 0.995004, 0.980067, 0.955336, 0.921061, 0.877583], unit=\"rad/s\"),\n  \"motor.w_ref\" => Var(values=[0.0 0.9; 0.0898501 0.895504; 0.178802 0.88206; 0.265968 0.859803; 0.350477 0.828955; 0.431483 0.789824], unit=[\"rad\", \"1/s\"], info=\"Reference angle and speed\"),\n  \"wm\" => Var(values=[1.0, 0.995004, 0.980067, 0.955336, 0.921061, 0.877583], unit=\"rad/s\", alias=\"motor.w\"),\n  \"ref.clock\" => Var(values=Union{Missing, Bool}[true, missing, missing, true, missing, missing], variability=\"clock\"),\n  \"ref.trigger\" => Var(values=Union{Missing, Bool}[missing, missing, true, missing, true, true], variability=\"trigger\"),\n  \"motor.w_c\" => Var(values=Union{Missing, Float64}[0.8, missing, missing, 1.5, missing, missing], variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\" => Par(value=0.02, unit=\"kg*m/s^2\"),\n  \"motor.data\" => Par(value=\"resources/motorMap.json\"),\n  \"attributes\" => Par(info=\"This is a test signal table\"),\n  )\n\n\n\n\n\n","category":"type"},{"location":"Functions/SignalTables.html#SignalTables.showInfo","page":"Signal Tables","title":"SignalTables.showInfo","text":"showInfo([io::IO=stdout,] signalTable;\n         sorted=false, Var=true, Par=true, attributes=true)\n\nWrites info about a signal table to the output stream. The keyword arguments define what information shall be printed or whether the names shall be sorted or presented in definition order.\n\nExample\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", independent=true),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"),\n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\", state=true, der=\"motor.w\"),\n  \"motor.w\"      => Var(values= cos.(t), unit=\"rad/s\"),\n  \"motor.w_ref\"  => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\n                                info=\"Reference angle and speed\"),\n  \"wm\"           => Var(alias = \"motor.w\"),\n  \"ref.clock\"    => Var(values= [true, missing, missing, true, missing, missing],\n                                 variability=\"clock\"),\n  \"ref.trigger\"  => Var(values= [missing, missing, true, missing, true, true],\n                                 variability=\"trigger\"),\n  \"motor.w_c\"    => Var(values= [0.8, missing, missing, 1.5, missing, missing],\n                                variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\"=> Par(value = 0.02f0, unit=\"kg*m/s^2\"),\n  \"motor.data\"   => Par(value = \"resources/motorMap.json\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nsignalInfo(sigTable)\n\nresults in the following output\n\nname          unit          size  eltypeOrType kind attributes\n─────────────────────────────────────────────────────────────────────────────────────────\ntime          \"s\"           (6,)  Float64  Var  independent=true\nload.r        \"m\"           (6,3) Float64  Var\nmotor.angle   \"rad\"         (6,)  Float64  Var  state=true, der=\"motor.w\"\nmotor.w       \"rad/s\"       (6,)  Float64  Var\nmotor.w_ref   [\"rad\",\"1/s\"] (6,2) Float64  Var  info=\"Reference angle and speed\"\nwm            \"rad/s\"       (6,)  Float64  Var  alias=\"motor.w\"\nref.clock                   (6,)  Bool     Var  variability=\"clock\"\nref.trigger                 (6,)  Bool     Var  variability=\"trigger\"\nmotor.w_c                   (6,)  Float64  Var  variability=\"clocked\", clock=\"ref.clock\"\nmotor.inertia \"kg*m/s^2\"    ()    Float32  Par\nmotor.data                  ()    String   Par\nattributes                                 Par  info=\"This is a test signal table\"\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getIndependentSignalNames","page":"Signal Tables","title":"SignalTables.getIndependentSignalNames","text":"getIndependentSignalNames(signalTable)::Vector{String}\n\nReturns the names of the independent signals (often: [\"time\"]) from signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getSignalNames","page":"Signal Tables","title":"SignalTables.getSignalNames","text":"getSignalNames(signalTable)::Vector{String}\n\nReturns a string vector of the signal names that are present in signalTable (including independent signal names).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.hasSignal","page":"Signal Tables","title":"SignalTables.hasSignal","text":"hasSignal(signalTable, name::String)\n\nReturns true if signal name is present in signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getSignal","page":"Signal Tables","title":"SignalTables.getSignal","text":"getSignal(signalTable, name::String)\n\nReturns signal name from signalTable (that is a Var or a Par). If name does not exist, an error is raised.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getSignalInfo","page":"Signal Tables","title":"SignalTables.getSignalInfo","text":"getSignalInfo(signalTable, name::String)\n\nReturns signal in form of a Var or a Par) without :values or :value but instead with :eltypeOrType (eltype of the values if AbstractArray, otherwise typeof the values)  and :size (if defined on the values)\n\nIf name does not exist, an error is raised.\n\nThis function is useful if only the attributes of a signal are needed, but not their values (returning the attributes might be a cheap operation, whereas returning the values  might be an expensive operation).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getIndependentSignalsSize","page":"Signal Tables","title":"SignalTables.getIndependentSignalsSize","text":"getIndependentSignalsSize(signalTable)::Dims\n\nReturns the lengths of the independent signals as Dims.  E.g. for one independent signal of length 5 return (5,), or for two independent signals of length 5 and 7 return (5,7).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValues","page":"Signal Tables","title":"SignalTables.getValues","text":"getValues(signalTable, name)\n\nReturns the values of a Var signal name from signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValuesWithUnit","page":"Signal Tables","title":"SignalTables.getValuesWithUnit","text":"getValuesWithUnit(signalTable, name)\n\nReturns the values of a Var signal name from signalTable including its unit.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValue","page":"Signal Tables","title":"SignalTables.getValue","text":"getValue(signalTable, name)\n\nReturns the value of a Par signal name from signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValueWithUnit","page":"Signal Tables","title":"SignalTables.getValueWithUnit","text":"getValueWithUnit(signalTable, name)\n\nReturns the value of a Par signal name from signalTable including its unit.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getFlattenedSignal","page":"Signal Tables","title":"SignalTables.getFlattenedSignal","text":"flattenedSignal = getFlattenedSignal(signalTable, name;\n                                     missingToNaN = true,\n                                     targetInt    = Int,\n                                     targetFloat  = Float64)\n\nReturns a copy of a signal where the values or the value are flattened and converted (e.g.: missing -> NaN). A flattened signal can be, for example, used for traditional plot functions or for traditional tables.\n\nFlattened values is a reshape of values into a vector or a matrix with optionally the following transformations:\n\nname can be a signal name with or without array range indices (for example name = \"a.b.c[2,3:5]\").\nIf missingToNaN=true, then missing values are replaced by NaN values. If NaN does not exist in the corresponding type, the values are first converted to targetFloat.\nIf targetInt is not nothing, Int-types are converted to targetInt\nIf targetFloat is not nothing, Float-types are converted to targetFloat\ncollect(..) is performed on the result.\n\nLegend is a vector of strings that provides a description for every array column (e.g. if \"name=a.b.c[2,3:5]\", unit=\"m/s\", then legend = [\"a.b.c[2,3] [m/s]\", \"a.b.c[2,3] [m/s]\", \"a.b.c[2,5] [m/s]\"].\n\nIf the required transformation is not possible, a warning message is printed and nothing is returned.\n\nAs a special case, if signal[:values] is a vector or signal[:value] is a scalar and an element of values or value is of type Measurements{targetFloat} or MonteCarloMeasurements{targetFloat}, then the signal is not transformed and flattenedSignal = getValues(signalTable,name) or getValue(signalTable,name).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getDefaultHeading","page":"Signal Tables","title":"SignalTables.getDefaultHeading","text":"getDefaultHeading(signalTable, name::String)::String\n\nReturns the default heading for a plot.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.signalTableToJSON","page":"Signal Tables","title":"SignalTables.signalTableToJSON","text":"json = signalTableToJSON(signalTable; signalNames = nothing)\n\nReturns a JSON string representation of signalTable\n\nIf keyword signalNames with a Vector of strings is provided, then a signal table with the corresponding signals are returned as JSON string.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.writeSignalTable","page":"Signal Tables","title":"SignalTables.writeSignalTable","text":"writeSignalTable(filename::String, signalTable; signalNames=nothing, indent=nothing, log=false)\n\nWrite signalTable in JSON format on file filename.\n\nIf keyword signalNames with a Vector of strings is provided, then a signal table with the corresponding signals are stored on file.\n\nIf indent=<number> is given, then <number> indentation is used (otherwise, compact representation)\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.toSignalTable","page":"Signal Tables","title":"SignalTables.toSignalTable","text":"toSignalTable(signalTable)::SignalTable\n\nReturns a signalTable as instance of SignalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.signalTableToDataFrame","page":"Signal Tables","title":"SignalTables.signalTableToDataFrame","text":"df = signalTableToDataFrame(signalTable)\n\nReturns a signal table as DataFrame object.     \n\n\n\n\n\n","category":"function"},{"location":"Examples/Plots.html#Plot-Examples","page":"Plot Examples","title":"Plot Examples","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"CurrentModule = SignalTables","category":"page"},{"location":"Examples/Plots.html#OneScalarSignal","page":"Plot Examples","title":"OneScalarSignal","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=10.0, length=100)\r\n\r\nsigTable = SignalTable(\r\n    \"time\" => Var(values = t, independent=true),\r\n    \"phi\"  => Var(values = sin.(t))\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name  unit  size    eltypeOrType  kind  attributes\r\n──────────────────────────────────────────────────────────\r\n time        (100,)  Float64       Var   independent=true\r\n phi         (100,)  Float64       Var","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: OneScalarSignal)","category":"page"},{"location":"Examples/Plots.html#OneScalarSignalWithUnit","page":"Plot Examples","title":"OneScalarSignalWithUnit","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=10.0, length=100)\r\n\r\nsigTable = SignalTable(\r\n    \"time\" => Var(values = t, unit=\"s\", independent=true),\r\n    \"phi\"  => Var(values = sin.(t), unit=\"rad\")\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name  unit   size    eltypeOrType  kind  attributes\r\n───────────────────────────────────────────────────────────\r\n time  \"s\"    (100,)  Float64       Var   independent=true\r\n phi   \"rad\"  (100,)  Float64       Var","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: OneScalarSignalWithUnit)","category":"page"},{"location":"Examples/Plots.html#OneVectorSignalWithUnit","page":"Plot Examples","title":"OneVectorSignalWithUnit","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=10.0, length=100)\r\n\r\nsigTable = SignalTable(\r\n    \"time\" => Var(values = t, unit=\"s\", independent=true),\r\n    \"r\"    => Var(values = [0.4*cos.(t)  0.5*sin.(t)  0.3*cos.(t)], unit=\"m\"),\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name  unit  size     eltypeOrType  kind  attributes\r\n───────────────────────────────────────────────────────────\r\n time  \"s\"   (100,)   Float64       Var   independent=true\r\n r     \"m\"   (100,3)  Float64       Var","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: OneVectorSignalWithUnit)","category":"page"},{"location":"Examples/Plots.html#OneMatrixSignal","page":"Plot Examples","title":"OneMatrixSignal","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=1.0, length=10)\r\n\r\noffset  = Float64[11  12  13;\r\n                  21  22  23]\r\nmatrix = Array{Float64,3}(undef,length(t),2,3)\r\nfor i = 1:length(t), j = 1:2, k=1:3\r\n    matrix[i,j,k] = offset[j,k] + 0.3*sin(t[i])\r\nend\r\n    \r\nsigTable = SignalTable(   \r\n    \"time\"   => Var(values = t, independent=true),\r\n    \"matrix\" => Var(values = matrix)\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name    unit  size      eltypeOrType  kind  attributes\r\n──────────────────────────────────────────────────────────────\r\n time          (10,)     Float64       Var   independent=true\r\n matrix        (10,2,3)  Float64       Var","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: OneMatrixSignal)","category":"page"},{"location":"Examples/Plots.html#OneMatrixSignalWithMatrixUnits","page":"Plot Examples","title":"OneMatrixSignalWithMatrixUnits","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=1.0, length=10)\r\n\r\noffset  = Float64[11  12  13;\r\n                  21  22  23]\r\nmatrix = Array{Float64,3}(undef,length(t),2,3)\r\nfor i = 1:length(t), j = 1:2, k=1:3\r\n    matrix[i,j,k] = offset[j,k] + 0.3*sin(t[i])\r\nend\r\n    \r\nsigTable = SignalTable(   \r\n    \"time\"   => Var(values = t, unit=\"s\", independent=true),\r\n    \"matrix\" => Var(values = matrix, unit=[\"m\"   \"m/s\"   \"m/s^2\";\r\n                                           \"rad\" \"rad/s\" \"rad/s^2\"])\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name    unit                                          size      eltypeOrType  kind  attributes\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────\r\n time    \"s\"                                           (10,)     Float64       Var   independent=true\r\n matrix  [\"m\" \"m/s\" \"m/s^2\"; \"rad\" \"rad/s\" \"rad/s^2\"]  (10,2,3)  Float64       Var","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: OneMatrixSignalWithMatrixUnits)","category":"page"},{"location":"Examples/Plots.html#ConstantSignals","page":"Plot Examples","title":"ConstantSignals","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = range(0.0, stop=1.0, length=5)\r\n\r\nmatrix = Float64[11  12  13;\r\n                 21  22  23]\r\n                            \r\nsigTable = SignalTable(\r\n    \"time\"    => Var(values = t, unit=\"s\", independent=true),\r\n    \"phi_max\" => Par(value = 1.1f0, unit=\"rad\"),\r\n    \"i_max\"   => Par(value = 2),\r\n    \"open\"    => Par(value = true),\r\n    \"file\"    => Par(value = \"filename.txt\"),\r\n    \"matrix1\" => Par(value = matrix),\r\n    \"matrix2\" => Par(alias = \"matrix1\", unit=\"m/s\"),\r\n    \"matrix3\" => Par(alias = \"matrix1\", unit=[\"m\"   \"m/s\"   \"m/s^2\";\r\n                                              \"rad\" \"rad/s\" \"rad/s^2\"])\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, \"phi\", heading=\"sine(time)\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name     unit                                          size   eltypeOrType  kind  attributes\r\n────────────────────────────────────────────────────────────────────────────────────────────────────\r\n time     \"s\"                                           (5,)   Float64       Var   independent=true\r\n phi_max  \"rad\"                                         ()     Float32       Par\r\n i_max                                                  ()     Int64         Par\r\n open                                                   ()     Bool          Par\r\n file                                                          String        Par\r\n matrix1                                                (2,3)  Float64       Par\r\n matrix2  \"m/s\"                                         (2,3)  Float64       Par   alias=\"matrix1\"\r\n matrix3  [\"m\" \"m/s\" \"m/s^2\"; \"rad\" \"rad/s\" \"rad/s^2\"]  (2,3)  Float64       Par   alias=\"matrix1\"","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: ConstantSignals)","category":"page"},{"location":"Examples/Plots.html#MissingValues","page":"Plot Examples","title":"MissingValues","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\ntime1 =  0.0 : 0.1 : 3.0\r\ntime2 =  3.0 : 0.1 : 11.0\r\ntime3 = 11.0 : 0.1 : 15\r\nt     = vcat(time1,time2,time3)   \r\nsigC  = vcat(fill(missing,length(time1)), 0.6*cos.(time2.+0.5), fill(missing,length(time3)))\r\n\r\nfunction sigD(t, time1, time2)\r\n    sig = Vector{Union{Missing,Float64}}(undef, length(t))\r\n    \r\n    j = 1\r\n    for i = length(time1)+1:length(time1)+length(time2)\r\n        if j == 1 \r\n            sig[i] = 0.5*cos(t[i])\r\n        end\r\n        j = j > 3 ? 1 : j+1\r\n    end\r\n    return sig\r\nend\r\n\r\nsigTable = SignalTable(\r\n    \"time\"   => Var(values=t, unit=\"s\", independent=true),\r\n    \"load.r\" => Var(values=0.4*[sin.(t) cos.(t) sin.(t)], unit=\"m\"),  \r\n    \"sigA\"   => Var(values=0.5*sin.(t), unit=\"m\"),\r\n    \"sigB\"   => Var(values=1.1*sin.(t), unit=\"m/s\"),\r\n    \"sigC\"   => Var(values=sigC, unit=\"N*m\"),\r\n    \"sigD\"   => Var(values=sigD(t, time1, time2), unit=\"rad/s\", variability=\"clocked\", info=\"Motor angular velocity\")  \r\n) \r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, [(\"sigC\", \"load.r[2:3]\"), (\"sigB\", \"sigD\")])","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name    unit     size     eltypeOrType            kind  attributes\r\n─────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n time    \"s\"      (153,)   Float64                 Var   independent=true\r\n load.r  \"m\"      (153,3)  Float64                 Var\r\n sigA    \"m\"      (153,)   Float64                 Var\r\n sigB    \"m/s\"    (153,)   Float64                 Var\r\n sigC    \"N*m\"    (153,)   Union{Missing,Float64}  Var\r\n sigD    \"rad/s\"  (153,)   Union{Missing,Float64}  Var   variability=\"clocked\", info=\"Motor angular velocit…","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: MissingValues)","category":"page"},{"location":"Examples/Plots.html#VariousTypes","page":"Plot Examples","title":"VariousTypes","text":"","category":"section"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"using SignalTables\r\n@usingPlotPackage \r\n   \r\nt = 0.0:0.1:0.5\r\nsigTable = SignalTable(\r\n\"time\"        => Var(values= t, unit=\"s\", independent=true),\r\n\"load.r\"      => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"),\r\n\"motor.angle\" => Var(values= sin.(t), unit=\"rad\", state=true),\r\n\"motor.w\"     => Var(values= cos.(t), unit=\"rad/s\", integral=\"motor.angle\"),\r\n\"motor.w_ref\" => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\r\n                            info=\"Reference angle and speed\"),\r\n\"wm\"          => Var(alias = \"motor.w\"),\r\n\"ref.clock\"   => Var(values= [true, missing, missing, true, missing, missing],\r\n                                variability=\"clock\"),\r\n                                \r\n\"motor.w_c\"   => Var(values= [0.6, missing, missing, 0.8, missing, missing],\r\n                            variability=\"clocked\", clock=\"ref.clock\"),\r\n\r\n\"motor.inertia\" => Par(value = 0.02f0, unit=\"kg*m/s^2\"),\r\n\"motor.data\"    => Par(value = \"resources/motorMap.json\"),\r\n\"attributes\"    => Par(info  = \"This is a test signal table\")\r\n)\r\n\r\nshowInfo(sigTable)\r\nplot(sigTable, [\"load.r\", (\"motor.w\", \"wm\", \"motor.w_c\", \"ref.clock\")], heading=\"VariousTypes\")","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"results  in:","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":" name           unit            size   eltypeOrType            kind  attributes\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n time           \"s\"             (6,)   Float64                 Var   independent=true\r\n load.r         \"m\"             (6,3)  Float64                 Var\r\n motor.angle    \"rad\"           (6,)   Float64                 Var   state=true, der=\"motor.w\"\r\n motor.w        \"rad/s\"         (6,)   Float64                 Var\r\n motor.w_ref    [\"rad\", \"1/s\"]  (6,2)  Float64                 Var   info=\"Reference angle and speed\"\r\n wm             \"rad/s\"         (6,)   Float64                 Var   alias=\"motor.w\"\r\n ref.clock                      (6,)   Union{Missing,Bool}     Var   variability=\"clock\"\r\n motor.w_c                      (6,)   Union{Missing,Float64}  Var   variability=\"clocked\", clock=\"ref.clock\"\r\n motor.inertia  \"kg*m/s^2\"      ()     Float32                 Par\r\n motor.data                            String                  Par\r\n attributes                                                    Par   info=\"This is a test signal table\"","category":"page"},{"location":"Examples/Plots.html","page":"Plot Examples","title":"Plot Examples","text":"(Image: VariousTypes)","category":"page"},{"location":"Functions/Signals.html#Signals","page":"Signals","title":"Signals","text":"","category":"section"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"The functions below operate on signals.","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols.","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"Signal functions Description\nVar Returns a variable signal definition in form of a dictionary.\nPar Returns a parameter signal definition in form of a dictionary.\nisVar Returns true, if signal is a Var.\nisPar Returns true, if signal is a Par.\nisSignal Returns true, if signal is a Var or a Par.\nshowSignal Prints a Var(...) or Par(...) signal to io.\neltypeOrType Returns eltype of an array (but without Missing) and otherwise returns typeof.\nquantity Returns Unitful.Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\nunitAsParseableString Returns the unit as a String that can be parsed with Unitful.uparse, e.g. \"m*s^-1\"","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"Var\r\nPar\r\nisVar\r\nisPar\r\nisSignal\r\nshowSignal\r\neltypeOrType\r\nquantity\r\nunitAsParseableString","category":"page"},{"location":"Functions/Signals.html#SignalTables.Var","page":"Signals","title":"SignalTables.Var","text":"signal = Var(; kwargs...)::OrderedDict{Symbol,Any}\n\nReturns a variable signal definition in form of a dictionary. kwargs... are key/value pairs of variable attributes.\n\nThe :values key represents a signal array of any element type  as function of the independent signal(s) (or is the k-th independent variable). A signal array has indices [i1,i2,...,j1,j2,...] to hold variable elements [j1,j2,...]  at the [i1,i2,...] independent signal(s). If an element of a signal array is not defined  it has a value of missing. Furthermore, additional attributes can be stored. \n\nThe following keys are recognized (all are optional, but usually :values is present):\n\nkey value (of type String, if not obvious from context)\n:values Array{T,N}: signal[:values][i1,i2,...j1,j2,...] is value [j1,j2,...] at the [i1,i2,...] independent signal(s), or signal[:values][i_k] is value [i_k] of the k-th independent variable.\n:unit String: Unit of all signal elements (parseable with Unitful.uparse), e.g., \"kg*m*s^2\". Array{String,N}: signal[:unit][j1,j2,...] is unit of variable element [j1,j2,...].\n:info Short description of signal (= description of FMI 3.0 and of Modelica).\n:independent = true, if independent variable (k-th independent variable is k-th Var insignal table)\n:variability \"continuous\", \"clocked\", \"clock\", \"discrete\", or \"tunable\" (parameter).\n:state = true, if signal is a (continuous, clocked, or discrete) state.\n:der String: getSignal(signalTable, signal[:der])[:values] is the derivative of signal[:values].\n:clock String: getSignal(signalTable, signal[:clock])[:values] is the clock associated with signal[:values] (is only defined at clock ticks and otherwise is missing). If Vector{String}, a set of clocks is associated with the signal.\n:alias String: signal[:values] is a reference to getSignal(signalTable, signal[:alias])[:values]. The reference is set and attributes are merged when the Var-signal is added to the signal table.\n:interpolation Interpolation of signal points (\"linear\", \"none\"). If not provided, interpolation is deduced from :variability and otherwise interpolation is `\"linear\".\n:extrapolation Extrapolation outside the values of the independent signal (\"none\").\n\nAdditionally, any other signal attributes can be stored in signal with a desired key, such as Variable Types of FMI 3.0.\n\nExample\n\nusing SignalTables\n\nt = (0.0:0.1:0.5)\nt_sig = Var(values = t, unit=u\"s\",  independent=true)\nw_sig = Var(values = sin.(t), unit=\"rad/s\", info=\"Motor angular velocity\")\nc_sig = Var(values = [1.0, missing, missing, 4.0, missing, missing],\n            variability=\"clocked\")\nb_sig = Var(values = [false, true, true, false, false, true])\na_sig = Var(alias = \"w_sig\")\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.Par","page":"Signals","title":"SignalTables.Par","text":"signal = Par(; kwargs...)::OrderedDict{Symbol,Any}\n\nReturns a parameter signal definition in form of a dictionary. A parameter is a variable that is constant and is not a function of the independent variables. kwargs... are key/value pairs of parameter attributes.\n\nThe value of a parameter variable is stored with key :value in signal and is an instance of any Julia type (number, string, array, tuple, dictionary, ...).\n\nThe following keys are recognized (all are optional):\n\nkey value (of type String, if not obvious from context)\n:value signal[:value] is a constant value that holds for all values of the independent signals.\n:unit String: Unit of all signal elements (parseable with Unitful.uparse), e.g., \"kg*m*s^2\". Array{String,N}: signal[:unit][j1,j2,...] is unit of variable element [j1,j2,...].\n:info Short description of signal (= description of FMI 3.0 and of Modelica).\n:alias String: signal[:value] is a reference to getSignal(signalTable, signal[:alias])[:value]. The reference is set and attributes are merged when the Par-signal is added to the signal table.\n\nAdditionally, any other signal attributes can be stored in signal with a desired key, such as Variable Types of FMI 3.0.\n\nExample\n\nusing SignalTables\n\nJ         = Par(value = 0.02, unit=u\"kg*m/s^2\", info=\"Motor inertia\")\nfileNames = Par(value = [\"data1.json\", \"data2.json\"])\nJ_alias   = Par(alias = \"J\")\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isVar","page":"Signals","title":"SignalTables.isVar","text":"isVar(signal)\n\nReturns true, if signal is a Var.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isPar","page":"Signals","title":"SignalTables.isPar","text":"isPar(signal)\n\nReturns true, if signal is a Par.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isSignal","page":"Signals","title":"SignalTables.isSignal","text":"isSignal(signal)\n\nReturns true, if signal is a Var or a Par.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.showSignal","page":"Signals","title":"SignalTables.showSignal","text":"showSignal([io=stdout,] signal)\n\nPrints a Var(...) or Par(...) signal to io.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.eltypeOrType","page":"Signals","title":"SignalTables.eltypeOrType","text":"eltypeOrType(obj)\n\nReturns eltype(obj), if obj is an AbstractArray and otherwise returns typeof(obj).\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.quantity","page":"Signals","title":"SignalTables.quantity","text":"quantityType = quantity(numberType, numberUnit::Unitful.FreeUnits)\n\nReturns Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\n\nExample\n\nusing SignalTables\nusing Unitful\n\nmutable struct Data{FloatType <: AbstractFloat}\n    velocity::quantity(FloatType, u\"m/s\")\nend\n\nv = Data{Float64}(2.0u\"mm/s\")\n@show v  # v = Data{Float64}(0.002 m s^-1)\n\nsig = Vector{Union{Missing,quantity(Float64,u\"m/s\")}}(missing,3)\nappend!(sig, [1.0, 2.0, 3.0]u\"m/s\")\nappend!(sig, fill(missing, 2))\n@show sig    # [missing, missing, missing, 1.0u\"m/s\", 2.0u\"m/s\", 3.0u\"m/s\", missing, missing]\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.unitAsParseableString","page":"Signals","title":"SignalTables.unitAsParseableString","text":"v_unit = unitAsParseableString(v::[Number|AbstractArray])::String\n\nReturns the unit of v as a string that can be parsed with Unitful.uparse.\n\nThis allows, for example, to store a quantity with units into a JSON File and recover it when reading the file. This is not (easily) possible with current Unitful functionality, because string(unit(v)) returns a string that cannot be parse with uparse. In Julia this is an unusual behavior because string(something) typically returns a string representation of something that can be again parsed by Julia. For more details, see Unitful issue 412.\n\nMost likely, unitAsParseableString(..) cannot handle all occuring cases.\n\nExamples\n\nusing SignalTables\nusing Unitful\n\ns = 2.1u\"m/s\"\nv = [1.0, 2.0, 3.0]u\"m/s\"\n\ns_unit = unitAsParseableString(s)  # ::String\nv_unit = unitAsParseableString(v)  # ::String\n\ns_unit2 = uparse(s_unit)  # :: Unitful.FreeUnits{(m, s^-1), ..., nothing}\nv_unit2 = uparse(v_unit)  # :: Unitful.FreeUnits{(m, s^-1), ..., nothing}\n\n@show s_unit   # = \"m*s^-1\"\n@show v_unit   # = \"m*s^-1\"\n\n@show s_unit2  # = \"m s^-1\"\n@show v_unit2  # = \"m s^-1\"\n\n\n\n\n\n","category":"function"},{"location":"Internal/AbstractSignalTableInterface.html#Abstract-Signal-Table-Interface","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"","category":"section"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"CurrentModule = SignalTables","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"This chapter documents the Abstract Signal Table Interface for which an implementation has to be provided, in order that the functions (see Overview of Functions) of the SignalTables package can be used.","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"A signal table is an ordered dictionary of signals with string keys. The first k entries represent the k independent signals. A signal is either a","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Var dictionary that has a required :values key representing a signal array of any element type  as function of the independent signal(s) (or is the k-th independent variable), or a\nPar dictionary that has an optional :value key representing a constant of any type.","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"A signal array has indices [i1,i2,...,j1,j2,...] to hold variable elements [j1,j2,...]  at the [i1,i2,...] independent signal(s). If an element of a signal array is not defined  it has a value of missing. In both dictionaries, additional attributes can be stored,  for example units, into texts, variability (continuous, clocked, ...), alias. ","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Functions that are marked as required, need to be defined for a new signal table type. Functions that are marked as optional have a default implementation.","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Abstract functions Description\ngetIndependentSignalNames Returns a string vector of the names of the independent signals (required).\ngetSignalNames Returns a string vector of the signal names from a signal table (required).\ngetSignal Returns signal from a signal table as Var or as Par (required).\ngetSignalInfo Returns signal with :_typeof, :_size keys instead of :values/:value key (optional).\ngetIndependentSignalsSize Returns the lengths of the independent signals as Dims. (optional).\ngetDefaultHeading Returns the default heading for a plot. (optional).\nhasSignal Returns true if signal name is present in signal table. (optional).","category":"page"},{"location":"Functions/OverviewOfFunctions.html#Overview-of-Functions","page":"Overview of Functions","title":"Overview of Functions","text":"","category":"section"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"This chapter documents functions that operate on signals and on signal tables","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"A signal table is an ordered dictionary of signals with string keys that supports the Abstract Signal Table Interface. The first k entries represent the k independent signals. A signal is either a","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Var dictionary that has a required :values key representing a signal array of any element type  as function of the independent signal(s) (or is the k-th independent variable), or a\nPar dictionary that has an optional :value key representing a constant of any type.","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"A signal array has indices [i1,i2,...,j1,j2,...] to hold variable elements [j1,j2,...]  at the [i1,i2,...] independent signal(s). If an element of a signal array is not defined  it has a value of missing. In both dictionaries, additional attributes can be stored,  for example units, into texts, variability (continuous, clocked, ...), alias. ","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Note, FileIO functions (e.g. JSON, HDF5) can be directly used, see FileIO Examples.","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Signal functions Description\nVar Returns a variable signal definition in form of a dictionary.\nPar Returns a parameter signal definition in form of a dictionary.\nisVar Returns true, if signal is a Var.\nisPar Returns true, if signal is a Par.\nisSignal Returns true, if signal is a Var or a Par.\nshowSignal Prints a Var(...) or Par(...) signal to io.\neltypeOrType Returns eltype(..) of AbstractArray or otherwise typeof(..).\nquantity Returns Unitful.Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\nunitAsParseableString Returns the unit as a String that can be parsed with Unitful.uparse, e.g. \"m*s^-1\"","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Signal table functions Description\nSignalTable Returns a new SignalTable dictionary.\nshowInfo Writes info about a signal table to the output stream.\ngetIndependentSignalNames Returns the names of the independent signals.\ngetSignalNames Returns a string vector of the signal names that are present in a signal table.\nhasSignal Returns true if a signal is present in a signal table.\ngetSignal Returns signal from a signal table as Var or as Par.\ngetSignalInfo Returns signal with :_typeof, :_size keys instead of :values/:value keys.\ngetIndependentSignalsSize Returns the lengths of the independent signals as Dims.\ngetValues Returns the values of a Var signal from a signal table.\ngetValuesWithUnit Returns the values of a Var signal from a signal table including its unit.\ngetValue Returns the value of a Par signal  from a signal table.\ngetValueWithUnit Returns the value of a Par signal from a signal table including its unit.\ngetFlattenedSignal Returns a copy of a signal where the values or the value are flattened and converted for use in plots or traditional tables.\ngetDefaultHeading Returns the default heading for a plot.\nsignalTableToJSON Returns a JSON string representation of a signal table.\nwriteSignalTable Write a signal table in JSON format on file.\ntoSignalTable Returns a signal table as SignalTable object.\nsignalTableToDataFrame Returns a signal table as DataFrame object.","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Plot package functions Description\n@usingPlotPackage Expands into using PlotPackage_<PlotPackageName>\nusePlotPackage Define the plot package to be used.\nusePreviousPlotPackage Define the previously defined plot package to be used.\ncurrentPlotPackage Return name defined with usePlotPackage","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/OverviewOfFunctions.html","page":"Overview of Functions","title":"Overview of Functions","text":"Plot functions Description\nplot Plot signals from a signal table in multiple diagrams/figures.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"index.html#SignalTables-Documentation","page":"Home","title":"SignalTables Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = SignalTables","category":"page"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Package SignalTables provides abstract and concrete types and functions for signal tables. Typically, simulation results, reference signals, table-based input signals, measurement data, look-up tables can be represented by a signal table.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A signal table is an ordered dictionary of signals with string keys that supports the Abstract Signal Table Interface.  A signal can be defined in two forms:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"As Var dictionary that has a required values key representing a signal array of any element type as function of the independent signal(s) (or is the k-th independent signal). A signal array is a multi-dimensional array with indices [i1,i2,...,j1,j2,...] to hold variable elements [j1,j2,...] at the [i1,i2,...] independent signal(s). If an element of a signal array is not defined, it has a value of missing.\nAs Par dictionary that has an optional value key representing a constant of any type.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"In both dictionaries, additional attributes can be stored, for example unit, info, variability (continuous, clocked, ...), alias, interpolation, extrapolation, and user-defined attributes.","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using SignalTables\r\n\r\nt = 0.0:0.1:0.5\r\nsigTable = SignalTable(\r\n  \"time\"        => Var(values= t, unit=\"s\", independent=true),\r\n  \"load.r\"      => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"),\r\n  \"motor.angle\" => Var(values= sin.(t), unit=\"rad\", state=true),\r\n  \"motor.w\"     => Var(values= cos.(t), unit=\"rad/s\", integral=\"motor.angle\"),\r\n  \"motor.w_ref\" => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\r\n                               info=\"Reference angle and speed\"),\r\n  \"wm\"          => Var(alias = \"motor.w\"),\r\n  \"ref.clock\"   => Var(values= [true, missing, missing, true, missing, missing],\r\n                                variability=\"clock\"),\r\n                                \r\n  \"motor.w_c\"   => Var(values= [0.8, missing, missing, 1.5, missing, missing],\r\n                               variability=\"clocked\", clock=\"ref.clock\"),\r\n\r\n  \"motor.inertia\" => Par(value = 0.02f0, unit=\"kg*m/s^2\"),\r\n  \"motor.data\"    => Par(value = \"resources/motorMap.json\"),\r\n  \"attributes\"    => Par(info  = \"This is a test signal table\")\r\n)\r\n\r\nphi_m_sig = getSignal(        sigTable, \"motor.angle\")   # = Var(values=..., unit=..., ...)\r\nphi_m     = getValuesWithUnit(sigTable, \"motor.angle\")   # = [0.0, 0.0998, 0.1986, ...]u\"rad\"\r\nw_c       = getValues(        sigTable, \"motor.w_c\"  )   # = [0.8, missing, missing, 1.5, ...]\r\ninertia   = getValueWithUnit( sigTable, \"motor.inertia\") # = 0.02u\"kg*m/s^2\"\r\ngetValues(sigTable, \"motor.w\") === getValues(sigTable, \"wm\")\r\n\r\nshowInfo(sigTable)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Command showInfo generates the following output:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"name          unit           size  eltypeOrType           kind attributes\r\n───────────────────────────────────────────────────────────────────────────────────────────────────────\r\ntime          \"s\"            (6,)  Float64                Var  independent=true\r\nload.r        \"m\"            (6,3) Float64                Var\r\nmotor.angle   \"rad\"          (6,)  Float64                Var  state=true, der=\"motor.w\"\r\nmotor.w       \"rad/s\"        (6,)  Float64                Var\r\nmotor.w_ref   [\"rad\", \"1/s\"] (6,2) Float64                Var  info=\"Reference angle and speed\"\r\nwm            \"rad/s\"        (6,)  Float64                Var  alias=\"motor.w\"\r\nref.clock                    (6,)  Union{Missing,Bool}    Var  variability=\"clock\"\r\nmotor.w_c                    (6,)  Union{Missing,Float64} Var  variability=\"clocked\", clock=\"ref.clock\"\r\nmotor.inertia \"kg*m/s^2\"     ()    Float32                Par\r\nmotor.data                         String                 Par\r\nattributes                                                Par  info=\"This is a test signal table\"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The various Julia FileIO functions can be directly used to save a signal table in various formats, e.g. JSON or HDF5 (see FileIO Examples, json file of sigTable above ).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The commands","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using SignalTable\r\nusePlotPackage(\"PyPlot\")    # or ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"\r\n\r\nsigTable = getSignalTableExample(\"MissingValues\")\r\n\r\n@usingPlotPackage           # = using SignalTablesInterface_PyPlot\r\nplot(sigTable, [(\"sigC\", \"load.r[2:3]\"), (\"sigB\", \"sigD\")])","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"generate the following plot:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Plots of SigTable)","category":"page"},{"location":"index.html#Abstract-Interfaces","page":"Home","title":"Abstract Interfaces","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Concrete implementations of the Abstract Signal Table Interface are provided for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"SignalTable (included in SignalTables.jl).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modia.jl (a modeling and simulation environment; version >= 0.9.0)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"DataFrames.jl (tabular data; first column is independent variable; only scalar variables))","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Tables.jl (abstract tables, e.g. CSV tables; first column is independent variable; only scalar variables).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Concrete implementations of the Abstract Plot Interface are provided for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PyPlot (plots with Matplotlib from Python; via SignalTablesInterface_PyPlot.jl),","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Planned implementations (basically adapting from ModiaResult.jl):","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"GLMakie (interactive plots in an OpenGL window),\nWGLMakie (interactive plots in a browser window),\nCairoMakie (static plots on file with publication quality).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Furthermore, there is a dummy implementation included in SignalTables.jl that is useful when performing tests with runtests.jl, in order that no plot package needs to be loaded during the tests:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"SilentNoPlot (= all plot calls are silently ignored).","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add SignalTables\r\n        add SignalTablesInterface_PyPlot        # if plotting with PyPlot desired\r\n        \r\n        # once registered\r\n        add SignalTablesInterface_GLMakie       # if plotting with GLMakie desired\r\n        add SignalTablesInterface_WGLMakie      # if plotting with WGLMakie desired\r\n        add SignalTablesInterface_CairoMakie    # if plotting with CairoMakie desired","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you have trouble installing SignalTablesInterface_PyPlot, see Installation of PyPlot.jl","category":"page"},{"location":"index.html#Installation-of-PyPlot.jl","page":"Home","title":"Installation of PyPlot.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SignalTablesInterface_PyPlot.jl uses PyPlot.jl which in turn uses Python. Therefore a Python installation is needed. Installation might give problems in some cases. Here are some hints what to do (you may also consult the documentation of PyPlot.jl).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Before installing SignalTablesInterface_PyPlot.jl make sure that PyPlot.jl is working:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the commands above give a plot window. Everything is fine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you get errors or no plot window appears or Julia crashes, try to first install a standard Python installation from Julia:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# Start a new Julia session\r\nENV[\"PYTHON\"] = \"\"    # Let Julia install Python\r\n]build PyCall\r\nexit()   # Exit Juila\r\n\r\n# Start a new Julia session\r\n]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the above does not work, or you want to use another Python distribution, install a Python 3.x distribution that contains Matplotlib, set ENV[\"PYTHON\"] = \"<path-above-python-installation>/python.exe\" and follow the steps above. Note, SignalTablesInterface_PyPlot is based on the Python 3.x version of Matplotlib where some keywords are different to the Python 2.x version.","category":"page"},{"location":"index.html#Release-Notes","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Version-0.3.1","page":"Home","title":"Version 0.3.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"writeSignalTable(..): Do not store elements, that cannot be mapped to JSON + add _classVersion to signal table on file.\nFor backwards compatibilty to ModiaResult, also accept ENV[\"MODIAPLOTPACKAGE\"] instead of ENV[\"SignalTablesPlotPackage\"] to define plot package.","category":"page"},{"location":"index.html#Version-0.3.0","page":"Home","title":"Version 0.3.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Slightly non-backwards compatiable to 0.2.0.\nVarious new functions (e.g. storing a signal table in JSON format on file).\nDataFrames.jl, Tables.jl are supported as signal tables.\nPlotting/flattening: Support of Measurements.jl and MonteCarloMeasurements.jl\nDocu improved.\nBug with PlotPackage \"SilentNoPlot\" fixed.\nSignalTables/test/runtests.jl runs the tests with plot package \"SilentNoPlot\" (instead of the activated plot package).\nNew file SignalTables/test/runtests_with_plot.jl runs the tests with the activated plot package.","category":"page"},{"location":"index.html#Version-0.2.0","page":"Home","title":"Version 0.2.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Version, based on ModiaResult.jl. Changes with respect to ModiaResult.jl:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Underlying data format made much simpler, more general and more useful:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Dictionary of multi-dimensional arrays as function of one or more independent variables with potentially missing values.\nAlso parameters can be stored in the dictionary and are supported, e.g., for plotting.\nVariables and parameters are dictionaries that store the actual values (e.g. arrays), and additional attributes.\nValues are stored without units and the units are provided via the additional string attribute :unit. A unit can be  either hold for all elements of an array, or an array of units can be provided defining the units for all variable elements.\nA new function to flatten and convert a signal array for use in plots or traditional tables.\nSince signals are arrays, all the Julia array operations can be directly used, e.g. for post-processing of simulation results.\nwrite/save on JSON and JDL (HDF5) files.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Furthermore","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation considerably improved and made more user-oriented.\nThe Abstract Interfaces defined more clearly.\nSeveral annoying bugs of ModiaResult.jl are no longer present.","category":"page"},{"location":"index.html#Version-0.1.0","page":"Home","title":"Version 0.1.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Initial version used for registration.","category":"page"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Martin Otter, DLR - Institute of System Dynamics and Control","category":"page"},{"location":"Internal/AbstractPlotInterface.html#Abstract-Plot-Interface","page":"Abstract Plot Interface","title":"Abstract Plot Interface","text":"","category":"section"},{"location":"Internal/AbstractPlotInterface.html","page":"Abstract Plot Interface","title":"Abstract Plot Interface","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Internal/AbstractPlotInterface.html","page":"Abstract Plot Interface","title":"Abstract Plot Interface","text":"This chapter documents the abstract plot interface for which an implementation has to be provided, in order that the corresponding plot package can be used from the functions of SignalTables to provide plots in a convenient way.","category":"page"},{"location":"Internal/AbstractPlotInterface.html","page":"Abstract Plot Interface","title":"Abstract Plot Interface","text":"For every plot package XXX.jl an interface package SignalTablesInterface_XXX.jl has to be provided that implements the following functions (with exception of plot, all other functions can be just dummy functions; the docu below was generated with SignalTablesInterface_PyPlot).","category":"page"},{"location":"Internal/AbstractPlotInterface.html","page":"Abstract Plot Interface","title":"Abstract Plot Interface","text":"Functions Description\nplot Plot signals of a signalTable in multiple diagrams within multiple windows/figures (required).\nsaveFigure Save figure in different formats on file (required).\ncloseFigure Close one figure (required)\ncloseAllFigures Close all figures (required)\nshowFigure Show figure in window (required)","category":"page"}]
}
