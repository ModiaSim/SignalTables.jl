var documenterSearchIndex = {"docs":
[{"location":"Functions/PlotPackages.html#Plot-Packages","page":"Plot Packages","title":"Plot Packages","text":"","category":"section"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"The plot package XXX to be used can be defined by:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"ENV[\"SignalTablesPlotPackage\"] = XXX\n(e.g. in .julia/config/startup.jl file: ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"), or\nby calling usePlotPackage(XXX) (e.g. usePlotPackage(\"PyPlot\")).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Supported values for XXX: ","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"\"PyPlot\" (PyPlot plots with Matplotlib from Python), \n\"GLMakie\" (GLMakie provides interactive plots in an OpenGL window),\n\"WGLMakie\" (WGLMakie provides interactive plots in a browser window),\n\"CairoMakie\" (CairoMakie provides static plots on file with publication quality).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Furthermore, there is a dummy implementation included in SignalTables that is useful when performing tests with runtests.jl,  in order that no plot package needs to be loaded during the tests:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"\"SilentNoPlot\" (= all plot calls are silently ignored).","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Typically, runtests.jl is defined as:","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"using SignalTables\r\nusePlotPackage(\"SilentNoPlot\") # Define Plot Package (previously defined one is put on a stack)\r\ninclude(\"include_all.jl\")      # Include all tests that use a plot package\r\nusePreviousPlotPackage()       # Use previously defined Plot package","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"The following functions are provided to define/inquire the current plot package.","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols.","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"Plot package functions Description\n@usingPlotPackage Expands into using PlotPackage_<PlotPackageName>\nusePlotPackage Define the plot package to be used.\nusePreviousPlotPackage Define the previously defined plot package to be used.\ncurrentPlotPackage Return name defined with usePlotPackage","category":"page"},{"location":"Functions/PlotPackages.html","page":"Plot Packages","title":"Plot Packages","text":"@usingPlotPackage\r\nusePlotPackage\r\nusePreviousPlotPackage\r\ncurrentPlotPackage","category":"page"},{"location":"Functions/PlotPackages.html#SignalTables.@usingPlotPackage","page":"Plot Packages","title":"SignalTables.@usingPlotPackage","text":"@usingPlotPackage()\n\nExecute using XXX, where XXX is the Plot package that was activated with usePlotPackage(plotPackage).\n\n\n\n\n\n","category":"macro"},{"location":"Functions/PlotPackages.html#SignalTables.usePlotPackage","page":"Plot Packages","title":"SignalTables.usePlotPackage","text":"usePlotPackage(plotPackage::String)\n\nDefine the plot package that shall be used by command @usingPlotPackage. If a PlotPackage package is already defined, save it on an internal stack (can be reactivated with usePreviousPlotPackage().\n\nPossible values for plotPackage:\n\n\"PyPlot\"\n\"GLMakie\"\n\"WGLMakie\"\n\"CairoMakie\"\n\"SilentNoPlot\"\n\nExample\n\nusing SignalTables\nusePlotPackage(\"GLMakie\")\n\nmodule MyTest\n    using SignalTables\n    @usingPlotPackage\n\n    t = range(0.0, stop=10.0, length=100)\n    result = Dict{String,Any}(\"time\" => t, \"phi\" => sin.(t))\n\n    plot(result, \"phi\")  # use GLMakie for the rendering\nend\n\n\n\n\n\n","category":"function"},{"location":"Functions/PlotPackages.html#SignalTables.usePreviousPlotPackage","page":"Plot Packages","title":"SignalTables.usePreviousPlotPackage","text":"usePreviousPlotPackage()\n\nPop the last saved PlotPackage package from an internal stack and call usePlotPackage(<popped PlotPackage package>).\n\n\n\n\n\n","category":"function"},{"location":"Functions/PlotPackages.html#SignalTables.currentPlotPackage","page":"Plot Packages","title":"SignalTables.currentPlotPackage","text":"currentPlotPackage()\n\nReturn the name of the plot package as a string that was defined with usePlotPackage. For example, the function may return \"GLMakie\", \"PyPlot\" or \"NoPlot\" or or \"\", if no PlotPackage is defined.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#Signal-Tables","page":"Signal Tables","title":"Signal Tables","text":"","category":"section"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"The functions below operate on a signal table that implements the Abstract Signal Table Interface.","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols and uses instantiatedModel as signalTable argument.","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"Signal table functions Description\nSignalTable Returns a new SignalTable dictionary.\nshowInfo Writes info about a signal table to the output stream.\nindependentSignalName Returns the name of the independent signal.\nsignalNames Returns a string vector of the signal names that are present in a signal table.\nhasSignal Returns true if a signal is present in a signal table.\ngetSignal Returns signal from a signal table as Var or as Par.\ngetValues Returns the values of a Var signal from a signal table.\ngetValuesWithUnit Returns the values of a Var signal from a signal table including its unit.\ngetValue Returns the value of a Par signal  from a signal table.\ngetValueWithUnit Returns the value of a Par signal from a signal table including its unit.\ngetSignalForLinePlots Transforms signal data and returns it for use in line plots (e.g. Matrix with NaN).","category":"page"},{"location":"Functions/SignalTables.html","page":"Signal Tables","title":"Signal Tables","text":"SignalTable\r\nshowInfo\r\nindependentSignalName\r\nsignalNames\r\nhasSignal\r\ngetSignal\r\ngetValues\r\ngetValuesWithUnit\r\ngetValue\r\ngetValueWithUnit\r\ngetSignalForLinePlots","category":"page"},{"location":"Functions/SignalTables.html#SignalTables.SignalTable","page":"Signal Tables","title":"SignalTables.SignalTable","text":"sigTable = SignalTable(args...)\n\nReturns a new SignalTable dictionary.\n\nArguments args... are dictionary pairs where values must be Var(...) or Par(...). Example:\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", variability = \"independent\"),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)]),  \n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\"),\n  \"motor.w_ref\"  => Var(values= cos.(t), unit=\"rad/s\", info=\"Reference\"),                       \n  \"motor.w_m\"    => Var(values= Clocked(0.9*cos.(t),factor=2), unit=\"rad/s\", info=\"Measured\"),\n  \"motor.inertia\"=> Par(value = 0.02, unit=\"kg*m/s^2\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nThe first argument must define the independent signal, that is, Var(values=..., variability=\"independent\"), ... and values must be an AbstractVector. Further added signals with a :values key, must have the same first dimension as the independent signal.\n\nMost dictionary operations can be applied on sigTable, as well as all functions of Overview of Functions.\n\nExamples\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", variability=\"independent\"),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"), \n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\", state=true),\n  \"motor.w\"      => Var(values= cos.(t), unit=\"rad/s\", integral=\"motor.angle\"),\n  \"motor.w_ref\"  => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\n                                info=\"Reference angle and speed\"),  \n  \"wm\"           => Var(alias = \"motor.w\"),\n  \"ref.clock\"    => Var(values= [true, missing, missing, true, missing, missing],\n                                 variability=\"clock\"),  \n  \"ref.trigger\"  => Var(values= [missing, missing, true, missing, true, true],\n                                 variability=\"trigger\"), \n  \"motor.w_c\"    => Var(values= [0.8, missing, missing, 1.5, missing, missing],\n                                variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\"=> Par(value = 0.02f0, unit=\"kg*m/s^2\"),\n  \"motor.data\"   => Par(value = \"resources/motorMap.json\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nsignalInfo(sigTable)\n\nThis results in the following output:\n\nname          unit          size  basetype kind attributes\n─────────────────────────────────────────────────────────────────────────────────────────\ntime          \"s\"           (6,)  Float64  Var  variability=\"independent\"\nload.r        \"m\"           (6,3) Float64  Var\nmotor.angle   \"rad\"         (6,)  Float64  Var  state=true\nmotor.w       \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\"\nmotor.w_ref   [\"rad\",\"1/s\"] (6,2) Float64  Var  info=\"Reference angle and speed\"\nwm            \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\", alias=\"motor.w\"\nref.clock                   (6,)  Bool     Var  variability=\"clock\"\nref.trigger                 (6,)  Bool     Var  variability=\"trigger\"\nmotor.w_c                   (6,)  Float64  Var  variability=\"clocked\", clock=\"ref.clock\"\nmotor.inertia \"kg*m/s^2\"    ()    Float32  Par\nmotor.data                        String   Par\nattributes                                 Par  info=\"This is a test signal table\"\n\nThe command show(IOContext(stdout, :compact => true), sigTable) results in the following output:\n\nSignalTable(\n  \"time\" => Var(values=0.0:0.1:0.5, unit=\"s\", variability=\"independent\"),\n  \"load.r\" => Var(values=[0.0 1.0 0.0; 0.0998334 0.995004 0.0998334; 0.198669 0.980067 0.198669; 0.29552 0.955336 0.29552; 0.389418 0.921061 0.389418; 0.479426 0.877583 0.479426], unit=\"m\"),\n  \"motor.angle\" => Var(values=[0.0, 0.0998334, 0.198669, 0.29552, 0.389418, 0.479426], unit=\"rad\", state=true),\n  \"motor.w\" => Var(values=[1.0, 0.995004, 0.980067, 0.955336, 0.921061, 0.877583], unit=\"rad/s\", integral=\"motor.angle\"),\n  \"motor.w_ref\" => Var(values=[0.0 0.9; 0.0898501 0.895504; 0.178802 0.88206; 0.265968 0.859803; 0.350477 0.828955; 0.431483 0.789824], unit=[\"rad\", \"1/s\"], info=\"Reference angle and speed\"),\n  \"wm\" => Var(values=[1.0, 0.995004, 0.980067, 0.955336, 0.921061, 0.877583], unit=\"rad/s\", integral=\"motor.angle\", alias=\"motor.w\"),\n  \"ref.clock\" => Var(values=Union{Missing, Bool}[true, missing, missing, true, missing, missing], variability=\"clock\"),\n  \"ref.trigger\" => Var(values=Union{Missing, Bool}[missing, missing, true, missing, true, true], variability=\"trigger\"),\n  \"motor.w_c\" => Var(values=Union{Missing, Float64}[0.8, missing, missing, 1.5, missing, missing], variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\" => Par(value=0.02, unit=\"kg*m/s^2\"),\n  \"motor.data\" => Par(value=\"resources/motorMap.json\"),\n  \"attributes\" => Par(info=\"This is a test signal table\"),\n  )\n\n\n\n\n\n","category":"type"},{"location":"Functions/SignalTables.html#SignalTables.showInfo","page":"Signal Tables","title":"SignalTables.showInfo","text":"showInfo([io::IO=stdout,] signalTable;\n         sorted=false, Var=true, Par=true, attributes=true)\n\nWrites info about a signal table to the output stream.\n\nThe independent signal is always printed first.  Otherwise, ordering is according to sorted.\n\nThe other keyword arguments define what information shall be printed.\n\nExample\n\nusing SignalTables\nusing Unitful\n\nt = 0.0:0.1:0.5\nsigTable = SignalTable(\n  \"time\"         => Var(values= t, unit=\"s\", variability=\"independent\"),\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"), \n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\", state=true),\n  \"motor.w\"      => Var(values= cos.(t), unit=\"rad/s\", integral=\"motor.angle\"),\n  \"motor.w_ref\"  => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\n                                info=\"Reference angle and speed\"),  \n  \"wm\"           => Var(alias = \"motor.w\"),\n  \"ref.clock\"    => Var(values= [true, missing, missing, true, missing, missing],\n                                 variability=\"clock\"),  \n  \"ref.trigger\"  => Var(values= [missing, missing, true, missing, true, true],\n                                 variability=\"trigger\"), \n  \"motor.w_c\"    => Var(values= [0.8, missing, missing, 1.5, missing, missing],\n                                variability=\"clocked\", clock=\"ref.clock\"),\n  \"motor.inertia\"=> Par(value = 0.02f0, unit=\"kg*m/s^2\"),\n  \"motor.data\"   => Par(value = \"resources/motorMap.json\"),\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\n)\n\nsignalInfo(sigTable)\n\nresults in the following output\n\nname          unit          size  basetype kind attributes\n─────────────────────────────────────────────────────────────────────────────────────────\ntime          \"s\"           (6,)  Float64  Var  variability=\"independent\"\nload.r        \"m\"           (6,3) Float64  Var\nmotor.angle   \"rad\"         (6,)  Float64  Var  state=true\nmotor.w       \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\"\nmotor.w_ref   [\"rad\",\"1/s\"] (6,2) Float64  Var  info=\"Reference angle and speed\"\nwm            \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\", alias=\"motor.w\"\nref.clock                   (6,)  Bool     Var  variability=\"clock\"\nref.trigger                 (6,)  Bool     Var  variability=\"trigger\"\nmotor.w_c                   (6,)  Float64  Var  variability=\"clocked\", clock=\"ref.clock\"\nmotor.inertia \"kg*m/s^2\"    ()    Float32  Par\nmotor.data                  ()    String   Par\nattributes                                 Par  info=\"This is a test signal table\"\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.independentSignalName","page":"Signal Tables","title":"SignalTables.independentSignalName","text":"independentSignalName(signalTable)\n\nReturns the name of the independent signal (typically: \"time\") from signalTable\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.signalNames","page":"Signal Tables","title":"SignalTables.signalNames","text":"signalNames(signalTable)\n\nReturns a string vector of the signal names that are present in signalTable (including independent signal name).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.hasSignal","page":"Signal Tables","title":"SignalTables.hasSignal","text":"hasSignal(signalTable, name::String)\n\nReturns true if signal name is present in signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getSignal","page":"Signal Tables","title":"SignalTables.getSignal","text":"getSignal(signalTable, name::String; require_values=true)\n\nReturns signal name from signalTable (that is a Var or a Par).\n\nIf name does not exist, an error is raised.\nIf require_values=false, the signal need not return :values (Var) or :value (Par).This option is useful, if only the attributes of a signal are needed, but not their values (returning the attributes might be a cheap operation, whereas returning the values in the form required by the Abstract Signal Table Interface might be an expensive operation).\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValues","page":"Signal Tables","title":"SignalTables.getValues","text":"getValues(signalTable, name)\n\nReturns the values of a Var signal name from signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValuesWithUnit","page":"Signal Tables","title":"SignalTables.getValuesWithUnit","text":"getValuesWithUnit(signalTable, name)\n\nReturns the values of a Var signal name from signalTable including its unit.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValue","page":"Signal Tables","title":"SignalTables.getValue","text":"getValue(signalTable, name)\n\nReturns the value of a Par signal name from signalTable.\n\n\n\n\n\n","category":"function"},{"location":"Functions/SignalTables.html#SignalTables.getValueWithUnit","page":"Signal Tables","title":"SignalTables.getValueWithUnit","text":"getValueWithUnit(signalTable, name)\n\nReturns the value of a Par signal name from signalTable including its unit.\n\n\n\n\n\n","category":"function"},{"location":"Internal/AbstractLinePlotInterface.html#Abstract-Line-Plot-Interface","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"","category":"section"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"This chapter documents the abstract line plot interface for which an implementation has to be provided, in order that the corresponding plot package can be used from the functions of SignalTables to provide line plots in a convenient way.","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"For every plot package XXX.jl an interface package SignalTablesInterface_XXX.jl has to be provided that implements the following functions (with exception of plot, all other functions can be just dummy functions; the docu below was generated with SignalTablesInterface_PyPlot).","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"Functions Description\nplot Plot simulation signalTables in multiple diagrams within multiple windows/figures (required).\nsaveFigure Save figure in different formats on file (required).\ncloseFigure Close one figure (required)\ncloseAllFigures Close all figures (required)\nshowFigure Show figure in window (required)","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"Concrete implementations of these functions are provided for:","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"PyPlot (plots with Matplotlib from Python), \nGLMakie (interactive plots in an OpenGL window),\nWGLMakie (interactive plots in a browser window),\nCairoMakie (static plots on file with publication quality).","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"Furthermore, there are two dummy modules included in SignalTables, that are useful when performing tests with runtests.jl,  in order that no plot package needs to be loaded during the tests:","category":"page"},{"location":"Internal/AbstractLinePlotInterface.html","page":"Abstract Line Plot Interface","title":"Abstract Line Plot Interface","text":"NoPlot (= all plot calls are ignored and info messages are instead printed), or\nSilentNoPlot (= NoPlot without messages).","category":"page"},{"location":"Functions/Signals.html#Signals","page":"Signals","title":"Signals","text":"","category":"section"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"The functions below operate on signals.","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"note: Note\nSignalTables.jl exports all symbols of this table.\nModia.jl reexports all symbols.","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"Signal functions Description\nVar Returns a variable signal definition in form of a dictionary.\nPar Returns a parameter signal definition in form of a dictionary.\nisVar Returns true, if signal is a Var.\nisPar Returns true, if signal is a Par.\nisSignal Returns true, if signal is a Var or a Par.\nshowSignal Prints a Var(...) or Par(...) signal to io.\nbasetype Returns eltype of an array (but without Missing) and otherwise returns typeof.\nquantity Returns Unitful.Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\nunitAsParseableString Returns the unit as a String that can be parsed with Unitful.uparse, e.g. \"m*s^-1\"","category":"page"},{"location":"Functions/Signals.html","page":"Signals","title":"Signals","text":"Var\r\nPar\r\nisVar\r\nisPar\r\nisSignal\r\nshowSignal\r\nbasetype\r\nquantity\r\nunitAsParseableString","category":"page"},{"location":"Functions/Signals.html#SignalTables.Var","page":"Signals","title":"SignalTables.Var","text":"signal = Var(; kwargs...)::OrderedDict{Symbol,Any}\n\nReturns a variable signal definition in form of a dictionary. kwargs... are key/value pairs of variable attributes.\n\nThe values of a variable v(t) are stored as signal[:values]  and are represented by an array where signal[:values][i,j,k,...] is value v[j,k,...] of variable v(t) at t_i. If an element of v is not defined at t_ì​, it has a value of missing.\n\nThe following keys are recognized (all are optional, but usually at least either :values or :eltype and :size are provided):\n\nkey value (of type String, if not obvious from context)\n:values Array{T,N} such that signal[:values][i,j,k,...] is value v[j,k,...] of v(t_i).\n:basetype =basetype( signal[:values] ). Automatically included, if :values is provided.\n:size = size( signal[:values] ). Automatically included, if :values is provided (size(scalar)=()).\n:unit Unit of all signal elements (parseable with Unitful.uparse), e.g., \"kg*m*s^2\".\n Vector{String}: signal[:unit][j,k,...] is unit of variable element v[j,k,...].\n:info Short description of signal (= description of FMI 3.0 and of Modelica).\n:causality Causality of signal (\"independent\", \"input\", \"output\", \"local\").\n:variability Time dependency of signal (\"tunable\", \"discrete\", \"clocked\", \"clock\", \"trigger\", \"continuous\").\n:state = true, if signal is a (discrete, clocked or continuous) state.\n:integral getSignal(signalTable, signal[:integral])[:values] is the integral of signal[:values].\n:clock getSignal(signalTable, signal[:clock])[:values] is the clock associated with signal[:values] (is only defined at clock ticks and otherwise is missing).\n If Vector{String}, a set of clocks is associated with the signal.\n:alias signal[:values] is a reference to getSignal(signalTable, signal[:alias])[:values] (and attributes are merged)\n:interpolation Interpolation of signal points (\"linear\", \"none\")\n:extrapolation Extrapolation outside the values of the independent signal (\"none\").\n\n:alias takes effect when adding the Var-signal to a signal table.\nLine plots are constructed with :interpolation, if provided, and otherwise from :variability if provided, and otherwise the signal[:values] points are linearly interpolated.\n\nAdditionally, any other signal attributes can be stored in signal with a desired key, especially the Variable Types of FMI 3.0.\n\nExample\n\nusing SignalTables\n\nt = (0.0:0.1:0.5)\nt_sig = Var(values = t, unit=u\"s\",  variability=\"independent\")\nw_sig = Var(values = sin.(t), unit=\"rad/s\", info=\"Motor angular velocity\")\nc_sig = Var(values = [1.0, missing, missing, 4.0, missing, missing],\n            variability=\"clocked\", interpolation=\"none\")\nb_sig = Var(values = [false, true, true, false, false, true])\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.Par","page":"Signals","title":"SignalTables.Par","text":"signal = Par(; kwargs...)::OrderedDict{Symbol,Any}\n\nReturns a parameter signal definition in form of a dictionary. A parameter is a variable that is constant and is not a function of the independent variable.  kwargs... are key/value pairs of parameter attributes.\n\nThe value of a parameter variable v(t) = v_const is stored with key :value in signal  and is an instance of a Julia type (number, string, array, tuple, dictionary, ...).\n\nThe following keys are recognized (all are optional, but usually at least either :value or :type are provided):\n\nkey value (of type String, if not obvious from context)\n:value signal[:value]::Any is constant value v(t)=v_const at all values t_i.\n:basetype =basetype( signal[:values] ). Automatically included, if :value is provided.\n:size = size( signal[:values] ), if size(..) is defined. Automatically included (size(scalar)=()).\n:unit Unit of all signal elements (parseable with Unitful.uparse), e.g., \"kg*m*s^2\".\n Vector{String}: signal[:unit][j,k,...] is unit of variable element v[j,k,...].\n:info Short description of signal (= description of FMI 3.0 and of Modelica).\n:alias signal[:value] is a reference to getSignal(signalTable, signal[:alias])[:value] (and attributes are merged)\n\n:alias takes effect when adding the Var-signal to a signal table.\n\nAdditionally, any other signal attributes can be stored in signal with a desired key, especially the Variable Types of FMI 3.0.\n\nExample\n\nusing SignalTables\n\nJ         = Par(value = 0.02, unit=u\"kg*m/s^2\", info=\"Motor inertia\")\nfileNames = Par(value = [\"data1.json\", \"data2.json\"])\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isVar","page":"Signals","title":"SignalTables.isVar","text":"isVar(signal)\n\nReturns true, if signal is a Var.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isPar","page":"Signals","title":"SignalTables.isPar","text":"isPar(signal)\n\nReturns true, if signal is a Par.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.isSignal","page":"Signals","title":"SignalTables.isSignal","text":"isSignal(signal)\n\nReturns true, if signal is a Var or a Par.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.showSignal","page":"Signals","title":"SignalTables.showSignal","text":"showSignal([io=stdout,] signal)\n\nPrints a Var(...) or Par(...) signal to io.\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.basetype","page":"Signals","title":"SignalTables.basetype","text":"basetype(obj)\n\nReturns eltype(obj), if obj is an array (but without Missing) and otherwise returns typeof(obj).\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.quantity","page":"Signals","title":"SignalTables.quantity","text":"quantityType = quantity(numberType, numberUnit::Unitful.FreeUnits)\n\nReturns Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\n\nExample\n\nusing SignalTables\nusing Unitful\n\nmutable struct Data{FloatType <: AbstractFloat}\n    velocity::quantity(FloatType, u\"m/s\")\nend\n\nv = Data{Float64}(2.0u\"mm/s\")\n@show v  # v = Data{Float64}(0.002 m s^-1)\n\nsig = Vector{Union{Missing,quantity(Float64,u\"m/s\")}}(missing,3) \nappend!(sig, [1.0, 2.0, 3.0]u\"m/s\")\nappend!(sig, fill(missing, 2))\n@show sig    # [missing, missing, missing, 1.0u\"m/s\", 2.0u\"m/s\", 3.0u\"m/s\", missing, missing]\n\n\n\n\n\n","category":"function"},{"location":"Functions/Signals.html#SignalTables.unitAsParseableString","page":"Signals","title":"SignalTables.unitAsParseableString","text":"v_unit = unitAsParseableString(v::[Number|AbstractArray])::String\n\nReturns the unit of v as a string that can be parsed with Unitful.uparse.\n\nThis allows, for example, to store a quantity with units into a JSON File and  recover it when reading the file. This is not (easily) possible with current Unitful functionality, because string(unit(v)) returns a string that cannot be parse with uparse. In Julia this is an unusual behavior because string(something)  typically returns a string representation of something that can be again parsed by Julia. For more details, see Unitful issue 412.\n\nMost likely, unitAsParseableString(..) cannot handle all occuring cases.\n\nExamples\n\nusing SignalTables\nusing Unitful\n\ns = 2.1u\"m/s\"\nv = [1.0, 2.0, 3.0]u\"m/s\"\n\ns_unit = unitAsParseableString(s)  # ::String\nv_unit = unitAsParseableString(v)  # ::String\n\ns_unit2 = uparse(s_unit)  # :: Unitful.FreeUnits{(m, s^-1), ..., nothing}\nv_unit2 = uparse(v_unit)  # :: Unitful.FreeUnits{(m, s^-1), ..., nothing}\n\n@show s_unit   # = \"m*s^-1\"\n@show v_unit   # = \"m*s^-1\"\n\n@show s_unit2  # = \"m s^-1\"\n@show v_unit2  # = \"m s^-1\"\n\n\n\n\n\n","category":"function"},{"location":"Internal/AbstractSignalTableInterface.html#Abstract-Signal-Table-Interface","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"","category":"section"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"CurrentModule = SignalTables","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"This chapter documents the Abstract Signal Table Interface for which an implementation has to be provided, in order that the functions (see Overview of Functions) of the SignalTables package can be used.","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Functions that are marked as required, need to be defined for a new signal table type. Functions that are marked as optional have a default implementation, but can be defined for  a new signal table type.","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Result functions Description\nindependentSignalName Returns the name of the independent signal (required).\nsignalNames Returns a string vector of the signal names from a signal table (required).\ngetSignal Returns signal from a signal table as Var or as Par (required).\nhasSignal Returns true if a signal is present in a signal table (optional).","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"Concrete implementations of theses functions are provided for:","category":"page"},{"location":"Internal/AbstractSignalTableInterface.html","page":"Abstract Signal Table Interface","title":"Abstract Signal Table Interface","text":"SignalTable (included in SignalTables.jl).\nModia.jl (a modeling and simulation environment)\nDataFrames.jl (tabular data; first column is independent variable; only scalar variables))\nTables.jl (abstract tables, e.g. CSV tables; first column is independent variable; only scalar variables).","category":"page"},{"location":"Functions/Overview.html#Overview-of-Functions","page":"Overview of Functions","title":"Overview of Functions","text":"","category":"section"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"CurrentModule = SignalTables","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"This chapter documents functions that operate on signals and on signal tables (= multi-dimensional arrays with identical first dimensions that are collected in tabular format and support the Abstract Signal Table Interface).","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"A signal is identified by its String name and is a representation of the values of a  variable v as a (partial) function v(t) of the independent variable t = v_independent. ","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"The values of v(t) are stored with key :values in dictionary Var (= abbreviation for Variable)  and are represented by an array where v.values[i,j,k,...] is element v[j,k,...] of  variable v at t_i. If an element of v is not defined at  t_ì, it has a value of missing.","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"If v(t) = v_const is constant, it is stored in element :value in dictionary Par  (= abbreviation for Parameter) and is represented by any Julia type, that is v.value is the value of variable v_const at all elements t_i.","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"Signal functions Description\nVar Returns a variable signal definition in form of a dictionary.\nPar Returns a parameter signal definition in form of a dictionary.\nisVar Returns true, if signal is a Var.\nisPar Returns true, if signal is a Par.\nisSignal Returns true, if signal is a Var or a Par.\nshowSignal Prints a Var(...) or Par(...) signal to io.\nbasetype Returns eltype of an array (but without Missing) and otherwise returns typeof.\nquantity Returns Unitful.Quantity from numberType and numberUnit, e.g. quantity(Float64,u\"m/s\")\nunitAsParseableString Returns the unit as a String that can be parsed with Unitful.uparse, e.g. \"m*s^-1\"","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"Signal table functions Description\nSignalTable Returns a new SignalTable dictionary.\nshowInfo Writes info about a signal table to the output stream.\nindependentSignalName Returns the name of the independent signal.\nsignalNames Returns a string vector of the signal names that are present in a signal table.\nhasSignal Returns true if a signal is present in a signal table.\ngetSignal Returns signal from a signal table as Var or as Par.\ngetValues Returns the values of a Var signal from a signal table.\ngetValuesWithUnit Returns the values of a Var signal from a signal table including its unit.\ngetValue Returns the value of a Par signal  from a signal table.\ngetValueWithUnit Returns the value of a Par signal from a signal table including its unit.\ngetSignalForLinePlots Transforms signal data and returns it for use in line plots (e.g. Matrix with NaN).","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"Plot package functions Description\n@usingPlotPackage Expands into using PlotPackage_<PlotPackageName>\nusePlotPackage Define the plot package to be used.\nusePreviousPlotPackage Define the previously defined plot package to be used.\ncurrentPlotPackage Return name defined with usePlotPackage","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/Overview.html","page":"Overview of Functions","title":"Overview of Functions","text":"Line plot functions Description\nplot Plot signals from a signal table in multiple diagrams/figures.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"Functions/LinePlots.html#Line-Plots","page":"Line Plots","title":"Line Plots","text":"","category":"section"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"CurrentModule = SignalTablesInterface_PyPlot","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"The functions below are used to plot one or more signalTable signals in one or more diagrams within one or more windows (figures), and save a window (figure) in various formats on file (e.g. png, pdf). The functions below are available after","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"using SignalTables   # Make Symbols available\r\n@usingPlotPackage    # Define used Plot package (expands e.g., into: using PlotPackage_PyPlot)","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"or","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"using Modia\r\n@usingPlotPackage","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"have been executed. The documentation has been generated with SignalTablesInterface_PyPlot.","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"note: Note\nSignalTables.jl exports all symbols of the table.\nModia.jl reexports all symbols and uses as signalTable argument instantiatedModel.","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"Line plot functions Description\nplot Plot signals from a signal table in multiple diagrams/figures.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"Functions/LinePlots.html","page":"Line Plots","title":"Line Plots","text":"plot\r\nsaveFigure\r\ncloseFigure\r\ncloseAllFigures\r\nshowFigure","category":"page"},{"location":"Functions/LinePlots.html#SignalTablesInterface_PyPlot.plot","page":"Line Plots","title":"SignalTablesInterface_PyPlot.plot","text":"plot(signalTable, names; \n     heading = \"\", grid = true, xAxis = nothing,\n     figure = 1, prefix = \"\", reuse = false, maxLegend = 10,\n     minXaxisTickLabels = false,\n     MonteCarloAsArea = true)\n\nGenerate line plots of selected signals of a signal table using the plot package defined with [@usePlotPackag]@ref(xxx). Possible values for xxx: \"GLMakie\", \"WGLMakie\", \"CairoMakie\", \"PyPlot\", \"SilentNoPlot\").\n\nsignalTable is an instance of a type that supports the Abstract Signal Table Interface.\n\nArgument names defines the diagrams to be drawn and the signals to be included in the respective diagram:\n\nIf names is a String, generate one diagram with one time series of the variable with key names.\nIf names is a Tuple of Strings, generate one diagram with the time series of the variables with the keys given in the tuple.\nIf names is a Vector or a Matrix of Strings and/or Tuples,  generate a vector or matrix of diagrams.\n\nNote, the names (and their units, if available in the signals) are automatically used as legends in the respective diagram.\n\nA signal variable identified by a String key can be a scalar of type <:Number or an array of element type <:Number. A signal is defined by a vector of time values, a corresponding vector of signal values, and the signal type (continuous or clocked).\n\nNote, before passing data to the plot package, it is converted to Float64. This allows to, for example, also plot rational numbers, even if not supported by the plot package. Measurements.Measurement{xxx}  and MonteCarloMeasurements is specially handled.\n\nOptional Arguments\n\nheading::AbstractString: Optional heading above the diagram.\ngrid::Bool: = true, to display a grid.\nxAxis::Union{AbstractString,Nothing}: Name of x-axis. If xAxis=nothing, the independent variable of the signal table (usually \"time\" is used as x-axis.\nfigure::Int: Integer identifier of the window in which the diagrams shall be drawn.\nprefix::AbstractString: String that is appended in front of every legend label  (useful especially if reuse=true).\nreuse::Bool: If figure already exists and reuse=false, clear the figure before adding the plot.  Otherwise, include the plot in the existing figure without removing the curves present in the figure.  reuse = true is ignored for \"WGLMakie\" (because not supported).\nmaxLegend::Int: If the number of legend entries in one plot command > maxLegend,  the legend is suppressed. All curves have still their names as labels. In PyPlot, the curves can be inspected by  their names by clicking in the toolbar of the plot on button Edit axis, curve ..  and then on Curves.\nminXaxisTickLabels::Bool: = true, if xaxis tick labels shall be removed in a vector or array of plots, if not the last row (useful when including plots in a document). = false, x axis tick labels are always shown (useful when interactively zooming into a plot).\nMonteCarloAsArea::Bool: = true, if MonteCarloMeasurements values are shown with the mean value and the area between the minimum and the maximum value of all particles. = false, if all particles of MonteCarloMeasurements values are shown (e.g. if a value has 2000 particles, then 2000 curves are shown in the diagram).\n\nExamples\n\nusing SignalTables\nusing Unitful\n\n# Generate \"using xxx\" statement \n# (where \"xxx\" is from a previous SignalTables.usePlotPackage(\"xxx\"))\n@usingPlotPackage\n\n# Construct result data\nt = range(0.0, stop=10.0, length=100);\nresult = Dict{String,Any}();\nresult[\"time\"] = t*u\"s\";\nresult[\"phi\"]  = sin.(t)*u\"rad\";\nresult[\"w\"]    = cos.(t)*u\"rad/s\";\nresult[\"a\"]    = 1.2*sin.(t)*u\"rad/s^2\";\nresult[\"r\"]    = hcat(0.4 * cos.(t), 0.5 * sin.(t), 0.3*cos.(t))*u\"m\";\n\n# 1 signal in one diagram (legend = \"phi [rad]\")\nplot(result, \"phi\")\n\n# 3 signals in one diagram\nplot(result, (\"phi\", \"w\", \"a\"), figure=2)\n\n# 3 diagrams in form of a vector (every diagram has one signal)\nplot(result, [\"phi\", \"w\", \"r\"], figure=3)\n\n# 4 diagrams in form of a matrix (every diagram has one signal)\nplot(result, [\"phi\" \"w\";\n              \"a\"   \"r[2]\" ], figure=4)\n\n# 2 diagrams in form of a vector\nplot(result, [ (\"phi\", \"w\"), (\"a\") ], figure=5)\n\n# 4 diagrams in form of a matrix\nplot(result, [ (\"phi\",)           (\"phi\", \"w\");\n               (\"phi\", \"w\", \"a\")  (\"r[2:3]\",)     ],figure=6)\n\n# Plot w=f(phi) in one diagram\nplot(result, \"w\", xAxis=\"phi\", figure=7)\n\n# Append signal of the next simulation run to figure=1\n# (legend = \"Sim 2: phi [rad]\")\nresult[\"phi\"] = 0.5*result[\"phi\"];\nplot(result, \"phi\", prefix=\"Sim 2: \", reuse=true)\n\nExample of a matrix of plots:\n\n(Image: Matrix of plots)\n\n\n\n\n\n","category":"function"},{"location":"Functions/LinePlots.html#SignalTablesInterface_PyPlot.saveFigure","page":"Line Plots","title":"SignalTablesInterface_PyPlot.saveFigure","text":"saveFigure(figure, file; kwargs...)\n\nSave figure on file. The file extension defines the image format (for example *.png).\n\nPlot package Supported file extensions\nGLMakie png, jpg, bmp\nWGLMakie png\nCairoMakie png, pdf, svg, eps\nPyPlot depends on backend (usually: png, pdf, jpg, tiff, svg, ps, eps)\nSilentNoPlot Call is ignored\n\nKeyword arguments\n\nresolution: (width::Int, height::Int) of the scene in dimensionless  units (equivalent to px for GLMakie and WGLMakie).\n\nExample\n\nusing SignalTables\n@usingPlotPackage\n...\n\nplot(..., figure=1)\nplot(..., figure=2)\n\nsaveFigure(1, \"plot.png\")   # save in png-format\nsaveFigure(2, \"plot.svg\")   # save in svg-format\n\n\n\n\n\n","category":"function"},{"location":"Functions/LinePlots.html#SignalTablesInterface_PyPlot.closeFigure","page":"Line Plots","title":"SignalTablesInterface_PyPlot.closeFigure","text":"closeFigure(figure)\n\nClose figure.\n\n\n\n\n\n","category":"function"},{"location":"Functions/LinePlots.html#SignalTablesInterface_PyPlot.closeAllFigures","page":"Line Plots","title":"SignalTablesInterface_PyPlot.closeAllFigures","text":"closeAllFigures()\n\nClose all figures.\n\n\n\n\n\n","category":"function"},{"location":"Functions/LinePlots.html#SignalTablesInterface_PyPlot.showFigure","page":"Line Plots","title":"SignalTablesInterface_PyPlot.showFigure","text":"showFigure(figure)\n\nPlot package Effect\nGLMakie Show figure in the single window.\nWGLMakie Show figure in the single window.\nCairoMakie Call is ignored\nPyPlot Call is ignored\nSilentNoPlot Call is ignored\n\nExample\n\nusing SignalTables\n@usingPlotPackage\n...\nplot(..., figure=1)\nplot(..., figure=2)\nplot(..., figure=3)\n\nshowFigure(2)\nshowFigure(1)\n\n\n\n\n\n","category":"function"},{"location":"index.html#SignalTables-Documentation","page":"Home","title":"SignalTables Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = SignalTables","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Package SignalTables provides types and functions for signals that are represented by  multi-dimensional arrays with identical first dimensions and are collected in tables. Typically, simulation results, reference signals, and table-based input signals can be represented by a signal table. More specifically:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A signal table is a (dictionary-like) type that supports the Abstract Signal Table Interface  for example SignalTable. It defines a set of signals in tabular format. A signal is identified  by its String name and is a representation of the values of a variable v as a (partial) function v(t) of the independent variable t = v_independent. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The values of v(t) are stored with key :values in dictionary Var (= abbreviation for Variable)  and are represented by an array where v.values[i,j,k,...] is element v[j,k,...] of  variable v at t_i. If an element of v is not defined at  t_ì, it has a value of missing.\nIf v(t) = v_const is constant, it is stored in element :value in dictionary Par  (= abbreviation for Parameter) and is represented by any Julia type where v.value is the value of v_const at all elements t_i.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using SignalTables\r\nusing Unitful\r\n\r\nt = 0.0:0.1:0.5\r\nsigTable = SignalTable(\r\n  \"time\"         => Var(values= t, unit=\"s\", variability=\"independent\"),\r\n  \"load.r\"       => Var(values= [sin.(t) cos.(t) sin.(t)], unit=\"m\"), \r\n  \"motor.angle\"  => Var(values= sin.(t), unit=\"rad\", state=true),\r\n  \"motor.w\"      => Var(values= cos.(t), unit=\"rad/s\", integral=\"motor.angle\"),\r\n  \"motor.w_ref\"  => Var(values= 0.9*[sin.(t) cos.(t)], unit = [\"rad\", \"1/s\"],\r\n                                info=\"Reference angle and speed\"),  \r\n  \"wm\"           => Var(alias = \"motor.w\"),\r\n  \"ref.clock\"    => Var(values= [true, missing, missing, true, missing, missing],\r\n                                 variability=\"clock\"),  \r\n  \"ref.trigger\"  => Var(values= [missing, missing, true, missing, true, true],\r\n                                 variability=\"trigger\"), \r\n  \"motor.w_c\"    => Var(values= [0.8, missing, missing, 1.5, missing, missing],\r\n                                variability=\"clocked\", clock=\"ref.clock\"),\r\n\r\n  \"motor.inertia\"=> Par(value = 0.02f0, unit=\"kg*m/s^2\"),\r\n  \"motor.data\"   => Par(value = \"resources/motorMap.json\"),\r\n  \"attributes\"   => Par(info  = \"This is a test signal table\")\r\n)\r\n\r\nphi_m_sig = getSignal(        sigTable, \"motor.angle\")   # = Var(values=..., unit=..., ...)\r\nphi_m     = getValuesWithUnit(sigTable, \"motor.angle\")   # = [0.0, 0.0998, 0.1986, ...]u\"rad\"\r\nw_c       = getValues(        sigTable, \"motor.w_c\"  )   # = [0.8, missing, missing, 1.5, ...]\r\ninertia   = getValueWithUnit( sigTable, \"motor.inertia\") # = 0.02u\"kg*m/s^2\"\r\ngetValues(sigTable, \"motor.w\") === getValues(sigTable, \"wm\")\r\n\r\nshowInfo(sigTable)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The last command generates the following output:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"name          unit          size  basetype kind attributes\r\n─────────────────────────────────────────────────────────────────────────────────────────\r\ntime          \"s\"           (6,)  Float64  Var  variability=\"independent\"\r\nload.r        \"m\"           (6,3) Float64  Var\r\nmotor.angle   \"rad\"         (6,)  Float64  Var  state=true\r\nmotor.w       \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\"\r\nmotor.w_ref   [\"rad\",\"1/s\"] (6,2) Float64  Var  info=\"Reference angle and speed\"\r\nwm            \"rad/s\"       (6,)  Float64  Var  integral=\"motor.angle\", alias=\"motor.w\"\r\nref.clock                   (6,)  Bool     Var  variability=\"clock\"\r\nref.trigger                 (6,)  Bool     Var  variability=\"trigger\"\r\nmotor.w_c                   (6,)  Float64  Var  variability=\"clocked\", clock=\"ref.clock\"\r\nmotor.inertia \"kg*m/s^2\"    ()    Float32  Par\r\nmotor.data                        String   Par\r\nattributes                                 Par  info=\"This is a test signal table\"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The commands","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# Define Plot Package in startup.jl, e.g. `ENV[\"SignalTablesPlotPackage\"] = \"PyPlot\"`\r\n# Or in Julia session, e.g. `usePlotPackage(\"PyPlot\")`\r\n\r\n@usingPlotPackage                                      # activate plot package\r\nplot(sigTable, [(\"sigA\", \"sigB\", \"sigC\"), \"r[2:3]\"])   # generate line plots","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"generate the following line plot:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Line plots of SigTable)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Concrete implementations of the Abstract Signal Table Interface are provided for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"SignalTable (included in SignalTables.jl).\nModia.jl (a modeling and simulation environment)\nDataFrames.jl (tabular data; first column is independent variable; only scalar variables))\nTables.jl (abstract tables, e.g. CSV tables; first column is independent variable; only scalar variables).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Concrete implementations of the Abstract Line Plot Interface are provided for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PyPlot (plots with Matplotlib from Python), \nGLMakie (interactive plots in an OpenGL window),\nWGLMakie (interactive plots in a browser window),\nCairoMakie (static plots on file with publication quality).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Furthermore, there is a dummy implementation included in SignalTables that is useful when performing tests with runtests.jl,  in order that no plot package needs to be loaded during the tests:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"SilentNoPlot (= all plot calls are silently ignored).","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The packages are not yet registered. Once this is done, installation is performed with","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add SignalTables\r\n        add SignalTablesInterface_PyPlot        # if plotting with PyPlot desired\r\n        add SignalTablesInterface_GLMakie       # if plotting with GLMakie desired\r\n        add SignalTablesInterface_WGLMakie      # if plotting with WGLMakie desired\r\n        add SignalTablesInterface_CairoMakie    # if plotting with CairoMakie desired","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you have trouble installing SignalTablesInterface_PyPlot, see  Installation of PyPlot.jl","category":"page"},{"location":"index.html#Installation-of-PyPlot.jl","page":"Home","title":"Installation of PyPlot.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SignalTablesInterface_PyPlot.jl uses PyPlot.jl which in turn uses Python.  Therefore a Python installation is needed. Installation  might give problems in some cases. Here are some hints what to do (you may also consult the documentation of PyPlot.jl).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Before installing SignalTablesInterface_PyPlot.jl make sure that PyPlot.jl is working:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the commands above give a plot window. Everything is fine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you get errors or no plot window appears or Julia crashes,  try to first install a standard Python installation from Julia:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# Start a new Julia session\r\nENV[\"PYTHON\"] = \"\"    # Let Julia install Python\r\n]build PyCall\r\nexit()   # Exit Juila\r\n\r\n# Start a new Julia session\r\n]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the above does not work, or you want to use another Python distribution, install a Python 3.x distribution that contains Matplotlib, set ENV[\"PYTHON\"] = \"<path-above-python-installation>/python.exe\" and follow the steps above. Note, SignalTablesInterface_PyPlot is based on the Python 3.x version of Matplotlib where some keywords are different to the Python 2.x version.","category":"page"},{"location":"index.html#Release-Notes","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Version-0.5.0-dev","page":"Home","title":"Version 0.5.0-dev","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Non-backwards compatible changes","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A signalTable data structure has only one time axis (previously, a signalTable datastructure could have several time axes). Therefore, function hasOneTimeSignal makes no sense anymore and is removed.","category":"page"},{"location":"index.html#Version-0.4.3","page":"Home","title":"Version 0.4.3","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Internal bug fixed.","category":"page"},{"location":"index.html#Version-0.4.2","page":"Home","title":"Version 0.4.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"showResultInfo(..) and signalTableInfo(..) improved (signals with one value defined with SignalTables.OneValueVector are specially marked, for example parameters).","category":"page"},{"location":"index.html#Version-0.4.1","page":"Home","title":"Version 0.4.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Update of Manifest.toml file","category":"page"},{"location":"index.html#Version-0.4.0","page":"Home","title":"Version 0.4.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Require Julia 1.7\nUpgrade Manifest.toml to version 2.0\nUpdate Project.toml/Manifest.toml","category":"page"},{"location":"index.html#Version-0.3.10","page":"Home","title":"Version 0.3.10","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Packages used in test models, prefixed with SignalTables. to avoid missing package errors.","category":"page"},{"location":"index.html#Version-0.3.9","page":"Home","title":"Version 0.3.9","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Wrong link in README.md corrected\nmakie.jl: Adapted to newer Makie version (update!(..) no longer known and needed).\nIssue with ustrip fixed.\nBroken test52MonteCarloMeasurementsWithDistributions.jl reactivated\nManifest.toml updated. ","category":"page"},{"location":"index.html#Version-0.3.8","page":"Home","title":"Version 0.3.8","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Better handling if some input arguments are nothing.\nBug corrected when accessing a vector element, such as mvec[2].\nDocumentation slightly improved.","category":"page"},{"location":"index.html#Version-0.3.7","page":"Home","title":"Version 0.3.7","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Replaced Point2f0 by Makie_Point2f that needs to be defined according to the newest Makie version.","category":"page"},{"location":"index.html#Version-0.3.6","page":"Home","title":"Version 0.3.6","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Adapt to MonteCarloMeasurements, version >= 1.0 (e.g. pmean(..) instead of mean(..))\nRemove test71TablesRotationalFirst.jl from runtests.jl, because \"using CSV\"  (in order that CSV.jl does not have to be added to the Project.toml file)","category":"page"},{"location":"index.html#Version-0.3.5","page":"Home","title":"Version 0.3.5","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Project.toml: Added version 1 of MonteCarloMeasurements.","category":"page"},{"location":"index.html#Version-0.3.4","page":"Home","title":"Version 0.3.4","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Project.toml: Added older versions to DataFrames, in order to reduce conflicts.","category":"page"},{"location":"index.html#Version-0.3.3","page":"Home","title":"Version 0.3.3","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SignalTables/test/Project.toml: DataStructures replaced by OrderedCollections.","category":"page"},{"location":"index.html#Version-0.3.2","page":"Home","title":"Version 0.3.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"DataStructures replaced by OrderedCollections.\nVersion numbers of used packages updated.","category":"page"},{"location":"index.html#Version-0.3.1","page":"Home","title":"Version 0.3.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Two new views on signalTables added (SignalView and FlattenedSignalView).","category":"page"},{"location":"index.html#Version-0.3","page":"Home","title":"Version 0.3","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Major clean-up of the function interfaces. This version is not backwards compatible to previous versions.","category":"page"},{"location":"index.html#Version-0.2.2","page":"Home","title":"Version 0.2.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Overloaded AstractDicts generalized from AbstractDict{String,T} where {T} to\nAbstractDict{T1,T2} where {T1<:AbstractString,T2}.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed.","category":"page"},{"location":"index.html#Version-0.2.1","page":"Home","title":"Version 0.2.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed: <: Vector changed to <: AbstractVector","category":"page"},{"location":"index.html#Version-0.2.0","page":"Home","title":"Version 0.2.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Abstract Interface slightly redesigned (therefore 0.2.0 is not backwards compatible to 0.1.0).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules NoPlot and SilentNoPlot added as sub-modules of SignalTables. These modules are activated if plot package \"NoPlot\" or \"SilentNoPlot\" are selected.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Content of directory srcplot moved into src. Afterwards srcplot was removed.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Directory test_plot merged into test (and then removed).","category":"page"},{"location":"index.html#Version-0.1.0","page":"Home","title":"Version 0.1.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Initial version (based on the signalTable plotting developed for ModiaMath).","category":"page"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Martin Otter, DLR - Institute of System Dynamics and Control","category":"page"}]
}
